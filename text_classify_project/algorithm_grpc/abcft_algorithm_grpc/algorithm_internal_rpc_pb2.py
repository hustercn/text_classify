# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: algorithm_internal_rpc.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from google.protobuf import any_pb2 as google_dot_protobuf_dot_any__pb2

from google.protobuf.empty_pb2 import *
from google.protobuf.any_pb2 import *

DESCRIPTOR = _descriptor.FileDescriptor(
  name='algorithm_internal_rpc.proto',
  package='com.abcft.algorithm.grpc.internal',
  syntax='proto3',
  serialized_pb=_b('\n\x1c\x61lgorithm_internal_rpc.proto\x12!com.abcft.algorithm.grpc.internal\x1a\x1bgoogle/protobuf/empty.proto\x1a\x19google/protobuf/any.proto\"\x1e\n\tPingReply\x12\x11\n\ttimestamp\x18\x01 \x01(\x03\"q\n\x0bVersionInfo\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x0f\n\x07version\x18\x02 \x01(\t\x12\x15\n\rversion_major\x18\x03 \x01(\x05\x12\x15\n\rversion_minor\x18\x04 \x01(\x05\x12\x15\n\rversion_patch\x18\x05 \x01(\x05\"Q\n\rVersionsReply\x12@\n\x08versions\x18\x01 \x03(\x0b\x32..com.abcft.algorithm.grpc.internal.VersionInfo\"(\n\nMethodInfo\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x0c\n\x04\x64\x65sc\x18\x02 \x01(\t\"N\n\x0cMethodsReply\x12>\n\x07methods\x18\x01 \x03(\x0b\x32-.com.abcft.algorithm.grpc.internal.MethodInfo\"d\n\nRpcRequest\x12\x0e\n\x06method\x18\x01 \x01(\t\x12\x0e\n\x04\x64\x61ta\x18\x02 \x01(\x0cH\x00\x12\r\n\x03url\x18\x03 \x01(\tH\x00\x12\x0e\n\x06params\x18\x04 \x01(\t\x12\x0f\n\x07version\x18\x05 \x01(\x05\x42\x06\n\x04\x66ile\"P\n\x08RpcReply\x12\n\n\x02ok\x18\x01 \x01(\x08\x12\x0e\n\x06result\x18\x02 \x01(\x0c\x12\x0c\n\x04\x63ode\x18\x03 \x01(\x05\x12\x0b\n\x03msg\x18\x04 \x01(\t\x12\r\n\x05\x65xtra\x18\x05 \x01(\t\";\n\x12ImageDetectRequest\x12\x0e\n\x04\x64\x61ta\x18\x01 \x01(\x0cH\x00\x12\r\n\x03url\x18\x02 \x01(\tH\x00\x42\x06\n\x04\x66ile\"\x92\x01\n\x10ImageDetectReply\x12\n\n\x02ok\x18\x01 \x01(\x08\x12\x0c\n\x04\x63ode\x18\x02 \x01(\x05\x12\x0b\n\x03msg\x18\x03 \x01(\t\x12:\n\x04type\x18\x04 \x01(\x0e\x32,.com.abcft.algorithm.grpc.internal.ImageType\x12\r\n\x05score\x18\x05 \x01(\x02\x12\x0c\n\x04\x62\x62ox\x18\x06 \x03(\x02\"I\n\x14ImageClassifyRequest\x12\x0e\n\x04\x64\x61ta\x18\x01 \x01(\x0cH\x00\x12\r\n\x03url\x18\x02 \x01(\tH\x00\x12\n\n\x02id\x18\x03 \x01(\tB\x06\n\x04\x66ile\"\xc5\x02\n\x12ImageClassifyReply\x12\n\n\x02ok\x18\x01 \x01(\x08\x12\x0c\n\x04\x63ode\x18\x02 \x01(\x05\x12\x0b\n\x03msg\x18\x03 \x01(\t\x12:\n\x04type\x18\x04 \x01(\x0e\x32,.com.abcft.algorithm.grpc.internal.ImageType\x12\r\n\x05score\x18\x05 \x01(\x02\x12\n\n\x02id\x18\x06 \x01(\t\x12T\n\x06result\x18\x07 \x03(\x0b\x32\x44.com.abcft.algorithm.grpc.internal.ImageClassifyReply.ClassifyResult\x1a[\n\x0e\x43lassifyResult\x12:\n\x04type\x18\x01 \x01(\x0e\x32,.com.abcft.algorithm.grpc.internal.ImageType\x12\r\n\x05score\x18\x02 \x01(\x02\"Z\n\x14TitleClassifyRequest\x12\x10\n\x08\x63\x61tegory\x18\x01 \x01(\t\x12\x13\n\x0b\x66irst_class\x18\x02 \x01(\t\x12\x0c\n\x04text\x18\x03 \x01(\t\x12\r\n\x05title\x18\x04 \x01(\t\"\x9d\x01\n\x12TitleClassifyReply\x12\n\n\x02ok\x18\x01 \x01(\x08\x12\x0c\n\x04\x63ode\x18\x02 \x01(\x05\x12\x0b\n\x03msg\x18\x03 \x01(\t\x12\x15\n\rclassify_code\x18\x04 \x01(\t\x12\x17\n\x0f\x63lassify_class1\x18\x05 \x01(\t\x12\x17\n\x0f\x63lassify_class2\x18\x06 \x01(\t\x12\x17\n\x0f\x63lassify_class3\x18\x07 \x01(\t\"\x95\x01\n\x12\x42itmapTableRequest\x12\x0e\n\x04\x64\x61ta\x18\x01 \x01(\x0cH\x00\x12\r\n\x03url\x18\x02 \x01(\tH\x00\x12\x12\n\ntable_type\x18\x03 \x01(\x05\x12\x0f\n\x07use_ocr\x18\x04 \x01(\x08\x12\x0e\n\x06\x66ormat\x18\x05 \x01(\t\x12\x12\n\nocr_engine\x18\x06 \x01(\t\x12\x0f\n\x07options\x18\x07 \x01(\x05\x42\x06\n\x04\x66ile\"W\n\x10\x42itmapTableReply\x12\n\n\x02ok\x18\x01 \x01(\x08\x12\x0c\n\x04\x63ode\x18\x02 \x01(\x05\x12\x0b\n\x03msg\x18\x03 \x01(\t\x12\x0e\n\x06parsed\x18\x04 \x01(\t\x12\x0c\n\x04\x62\x62ox\x18\x05 \x03(\x02\"P\n\x12\x42itmapChartRequest\x12\x0e\n\x04\x64\x61ta\x18\x01 \x01(\x0cH\x00\x12\r\n\x03url\x18\x02 \x01(\tH\x00\x12\x13\n\x0b\x63hart_types\x18\x03 \x03(\x05\x42\x06\n\x04\x66ile\"I\n\x10\x42itmapChartReply\x12\n\n\x02ok\x18\x01 \x01(\x08\x12\x0c\n\x04\x63ode\x18\x02 \x01(\x05\x12\x0b\n\x03msg\x18\x03 \x01(\t\x12\x0e\n\x06parsed\x18\x04 \x01(\t\"9\n\x10TesseractRequest\x12\x0e\n\x04\x64\x61ta\x18\x01 \x01(\x0cH\x00\x12\r\n\x03url\x18\x02 \x01(\tH\x00\x42\x06\n\x04\x66ile\"a\n\x0eTesseractReply\x12\n\n\x02ok\x18\x01 \x01(\x08\x12\x0c\n\x04\x63ode\x18\x02 \x01(\x05\x12\x0b\n\x03msg\x18\x03 \x01(\t\x12\x0c\n\x04text\x18\x04 \x01(\t\x12\x0c\n\x04type\x18\x05 \x01(\x05\x12\x0c\n\x04\x62\x62ox\x18\x06 \x03(\x02\";\n\x12\x43hartDetectRequest\x12\x0e\n\x04\x64\x61ta\x18\x01 \x01(\x0cH\x00\x12\r\n\x03url\x18\x02 \x01(\tH\x00\x42\x06\n\x04\x66ile\"d\n\x10\x43hartDetectReply\x12\n\n\x02ok\x18\x01 \x01(\x08\x12\x0c\n\x04\x63ode\x18\x02 \x01(\x05\x12\x0b\n\x03msg\x18\x03 \x01(\t\x12\x0c\n\x04type\x18\x04 \x01(\x05\x12\r\n\x05score\x18\x05 \x01(\x02\x12\x0c\n\x04\x62\x62ox\x18\x06 \x03(\x02\"\'\n\x13TextClassifyRequest\x12\x10\n\x08\x66ulltext\x18\x01 \x01(\t\"Z\n\x11TextClassifyReply\x12\n\n\x02ok\x18\x01 \x01(\x08\x12\x0c\n\x04\x63ode\x18\x02 \x01(\x05\x12\x0b\n\x03msg\x18\x03 \x01(\t\x12\x10\n\x08language\x18\x04 \x01(\t\x12\x0c\n\x04type\x18\x05 \x01(\t\"4\n\x0f\x41llennlpRequest\x12\x0f\n\x07passage\x18\x01 \x01(\t\x12\x10\n\x08question\x18\x02 \x01(\t\"F\n\rAllennlpReply\x12\n\n\x02ok\x18\x01 \x01(\x08\x12\x0c\n\x04\x63ode\x18\x02 \x01(\x05\x12\x0b\n\x03msg\x18\x03 \x01(\t\x12\x0e\n\x06result\x18\x04 \x01(\t*\xcd\x03\n\tImageType\x12\x0f\n\x0bIMAGE_OTHER\x10\x00\x12\x14\n\x10IMAGE_LINE_CHART\x10\x01\x12\x14\n\x10IMAGE_AREA_CHART\x10\x02\x12\x13\n\x0fIMAGE_BAR_CHART\x10\x03\x12\x16\n\x12IMAGE_COLUMN_CHART\x10\x04\x12\x13\n\x0fIMAGE_PIE_CHART\x10\x05\x12\x15\n\x11IMAGE_COMBO_CHART\x10\x06\x12\x14\n\x10IMAGE_GRID_TABLE\x10\x07\x12\x14\n\x10IMAGE_LINE_TABLE\x10\x08\x12\x11\n\rIMAGE_QR_CODE\x10\t\x12\x14\n\x10IMAGE_INFO_GRAPH\x10\n\x12\x0e\n\nIMAGE_TEXT\x10\x0b\x12\x1b\n\x17IMAGE_CANDLESTICK_CHART\x10\x0c\x12\x1a\n\x16IMAGE_OTHER_MEANINGFUL\x10\r\x12\x10\n\x0cIMAGE_PHOTOS\x10\x0e\x12\x17\n\x13IMAGE_SCATTER_CHART\x10\x0f\x12\x15\n\x11IMAGE_RADAR_CHART\x10\x10\x12\x15\n\x11IMAGE_DONUT_CHART\x10\x11\x12\x1a\n\x16IMAGE_LINE_POINT_CHART\x10\x12\x12\x17\n\x13IMAGE_DISCRETE_PLOT\x10\x13\x32\xb2\x0e\n\x18\x41lgorithmInternalService\x12N\n\x04Ping\x12\x16.google.protobuf.Empty\x1a,.com.abcft.algorithm.grpc.internal.PingReply\"\x00\x12Y\n\x0bGetVersions\x12\x16.google.protobuf.Empty\x1a\x30.com.abcft.algorithm.grpc.internal.VersionsReply\"\x00\x12X\n\x0bListMethods\x12\x16.google.protobuf.Empty\x1a/.com.abcft.algorithm.grpc.internal.MethodsReply\"\x00\x12i\n\x07Request\x12-.com.abcft.algorithm.grpc.internal.RpcRequest\x1a+.com.abcft.algorithm.grpc.internal.RpcReply\"\x00\x30\x01\x12}\n\x0bImageDetect\x12\x35.com.abcft.algorithm.grpc.internal.ImageDetectRequest\x1a\x33.com.abcft.algorithm.grpc.internal.ImageDetectReply\"\x00\x30\x01\x12\x83\x01\n\rImageClassify\x12\x37.com.abcft.algorithm.grpc.internal.ImageClassifyRequest\x1a\x35.com.abcft.algorithm.grpc.internal.ImageClassifyReply\"\x00\x30\x01\x12\x8a\x01\n\x12ImageClassifyBatch\x12\x37.com.abcft.algorithm.grpc.internal.ImageClassifyRequest\x1a\x35.com.abcft.algorithm.grpc.internal.ImageClassifyReply\"\x00(\x01\x30\x01\x12\x83\x01\n\rTitleClassify\x12\x37.com.abcft.algorithm.grpc.internal.TitleClassifyRequest\x1a\x35.com.abcft.algorithm.grpc.internal.TitleClassifyReply\"\x00\x30\x01\x12\x82\x01\n\x10\x42itmapTableParse\x12\x35.com.abcft.algorithm.grpc.internal.BitmapTableRequest\x1a\x33.com.abcft.algorithm.grpc.internal.BitmapTableReply\"\x00\x30\x01\x12\x87\x01\n\x15\x42itmapTableParseBatch\x12\x35.com.abcft.algorithm.grpc.internal.BitmapTableRequest\x1a\x33.com.abcft.algorithm.grpc.internal.BitmapTableReply\"\x00\x30\x01\x12\x82\x01\n\x10\x42itmapChartParse\x12\x35.com.abcft.algorithm.grpc.internal.BitmapChartRequest\x1a\x33.com.abcft.algorithm.grpc.internal.BitmapChartReply\"\x00\x30\x01\x12\x81\x01\n\x13TesseractDetectText\x12\x33.com.abcft.algorithm.grpc.internal.TesseractRequest\x1a\x31.com.abcft.algorithm.grpc.internal.TesseractReply\"\x00\x30\x01\x12}\n\x0b\x43hartDetect\x12\x35.com.abcft.algorithm.grpc.internal.ChartDetectRequest\x1a\x33.com.abcft.algorithm.grpc.internal.ChartDetectReply\"\x00\x30\x01\x12\x80\x01\n\x0cTextClassify\x12\x36.com.abcft.algorithm.grpc.internal.TextClassifyRequest\x1a\x34.com.abcft.algorithm.grpc.internal.TextClassifyReply\"\x00\x30\x01\x12t\n\x08\x41llennlp\x12\x32.com.abcft.algorithm.grpc.internal.AllennlpRequest\x1a\x30.com.abcft.algorithm.grpc.internal.AllennlpReply\"\x00\x30\x01P\x00P\x01\x62\x06proto3')
  ,
  dependencies=[google_dot_protobuf_dot_empty__pb2.DESCRIPTOR,google_dot_protobuf_dot_any__pb2.DESCRIPTOR,],
  public_dependencies=[google_dot_protobuf_dot_empty__pb2.DESCRIPTOR,google_dot_protobuf_dot_any__pb2.DESCRIPTOR,])

_IMAGETYPE = _descriptor.EnumDescriptor(
  name='ImageType',
  full_name='com.abcft.algorithm.grpc.internal.ImageType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='IMAGE_OTHER', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMAGE_LINE_CHART', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMAGE_AREA_CHART', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMAGE_BAR_CHART', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMAGE_COLUMN_CHART', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMAGE_PIE_CHART', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMAGE_COMBO_CHART', index=6, number=6,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMAGE_GRID_TABLE', index=7, number=7,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMAGE_LINE_TABLE', index=8, number=8,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMAGE_QR_CODE', index=9, number=9,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMAGE_INFO_GRAPH', index=10, number=10,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMAGE_TEXT', index=11, number=11,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMAGE_CANDLESTICK_CHART', index=12, number=12,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMAGE_OTHER_MEANINGFUL', index=13, number=13,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMAGE_PHOTOS', index=14, number=14,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMAGE_SCATTER_CHART', index=15, number=15,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMAGE_RADAR_CHART', index=16, number=16,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMAGE_DONUT_CHART', index=17, number=17,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMAGE_LINE_POINT_CHART', index=18, number=18,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IMAGE_DISCRETE_PLOT', index=19, number=19,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=2503,
  serialized_end=2964,
)
_sym_db.RegisterEnumDescriptor(_IMAGETYPE)

ImageType = enum_type_wrapper.EnumTypeWrapper(_IMAGETYPE)
IMAGE_OTHER = 0
IMAGE_LINE_CHART = 1
IMAGE_AREA_CHART = 2
IMAGE_BAR_CHART = 3
IMAGE_COLUMN_CHART = 4
IMAGE_PIE_CHART = 5
IMAGE_COMBO_CHART = 6
IMAGE_GRID_TABLE = 7
IMAGE_LINE_TABLE = 8
IMAGE_QR_CODE = 9
IMAGE_INFO_GRAPH = 10
IMAGE_TEXT = 11
IMAGE_CANDLESTICK_CHART = 12
IMAGE_OTHER_MEANINGFUL = 13
IMAGE_PHOTOS = 14
IMAGE_SCATTER_CHART = 15
IMAGE_RADAR_CHART = 16
IMAGE_DONUT_CHART = 17
IMAGE_LINE_POINT_CHART = 18
IMAGE_DISCRETE_PLOT = 19



_PINGREPLY = _descriptor.Descriptor(
  name='PingReply',
  full_name='com.abcft.algorithm.grpc.internal.PingReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='timestamp', full_name='com.abcft.algorithm.grpc.internal.PingReply.timestamp', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=123,
  serialized_end=153,
)


_VERSIONINFO = _descriptor.Descriptor(
  name='VersionInfo',
  full_name='com.abcft.algorithm.grpc.internal.VersionInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='com.abcft.algorithm.grpc.internal.VersionInfo.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='version', full_name='com.abcft.algorithm.grpc.internal.VersionInfo.version', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='version_major', full_name='com.abcft.algorithm.grpc.internal.VersionInfo.version_major', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='version_minor', full_name='com.abcft.algorithm.grpc.internal.VersionInfo.version_minor', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='version_patch', full_name='com.abcft.algorithm.grpc.internal.VersionInfo.version_patch', index=4,
      number=5, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=155,
  serialized_end=268,
)


_VERSIONSREPLY = _descriptor.Descriptor(
  name='VersionsReply',
  full_name='com.abcft.algorithm.grpc.internal.VersionsReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='versions', full_name='com.abcft.algorithm.grpc.internal.VersionsReply.versions', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=270,
  serialized_end=351,
)


_METHODINFO = _descriptor.Descriptor(
  name='MethodInfo',
  full_name='com.abcft.algorithm.grpc.internal.MethodInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='com.abcft.algorithm.grpc.internal.MethodInfo.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='desc', full_name='com.abcft.algorithm.grpc.internal.MethodInfo.desc', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=353,
  serialized_end=393,
)


_METHODSREPLY = _descriptor.Descriptor(
  name='MethodsReply',
  full_name='com.abcft.algorithm.grpc.internal.MethodsReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='methods', full_name='com.abcft.algorithm.grpc.internal.MethodsReply.methods', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=395,
  serialized_end=473,
)


_RPCREQUEST = _descriptor.Descriptor(
  name='RpcRequest',
  full_name='com.abcft.algorithm.grpc.internal.RpcRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='method', full_name='com.abcft.algorithm.grpc.internal.RpcRequest.method', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data', full_name='com.abcft.algorithm.grpc.internal.RpcRequest.data', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='url', full_name='com.abcft.algorithm.grpc.internal.RpcRequest.url', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='params', full_name='com.abcft.algorithm.grpc.internal.RpcRequest.params', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='version', full_name='com.abcft.algorithm.grpc.internal.RpcRequest.version', index=4,
      number=5, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='file', full_name='com.abcft.algorithm.grpc.internal.RpcRequest.file',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=475,
  serialized_end=575,
)


_RPCREPLY = _descriptor.Descriptor(
  name='RpcReply',
  full_name='com.abcft.algorithm.grpc.internal.RpcReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ok', full_name='com.abcft.algorithm.grpc.internal.RpcReply.ok', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='result', full_name='com.abcft.algorithm.grpc.internal.RpcReply.result', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='code', full_name='com.abcft.algorithm.grpc.internal.RpcReply.code', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='msg', full_name='com.abcft.algorithm.grpc.internal.RpcReply.msg', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='extra', full_name='com.abcft.algorithm.grpc.internal.RpcReply.extra', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=577,
  serialized_end=657,
)


_IMAGEDETECTREQUEST = _descriptor.Descriptor(
  name='ImageDetectRequest',
  full_name='com.abcft.algorithm.grpc.internal.ImageDetectRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='com.abcft.algorithm.grpc.internal.ImageDetectRequest.data', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='url', full_name='com.abcft.algorithm.grpc.internal.ImageDetectRequest.url', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='file', full_name='com.abcft.algorithm.grpc.internal.ImageDetectRequest.file',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=659,
  serialized_end=718,
)


_IMAGEDETECTREPLY = _descriptor.Descriptor(
  name='ImageDetectReply',
  full_name='com.abcft.algorithm.grpc.internal.ImageDetectReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ok', full_name='com.abcft.algorithm.grpc.internal.ImageDetectReply.ok', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='code', full_name='com.abcft.algorithm.grpc.internal.ImageDetectReply.code', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='msg', full_name='com.abcft.algorithm.grpc.internal.ImageDetectReply.msg', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='type', full_name='com.abcft.algorithm.grpc.internal.ImageDetectReply.type', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='score', full_name='com.abcft.algorithm.grpc.internal.ImageDetectReply.score', index=4,
      number=5, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bbox', full_name='com.abcft.algorithm.grpc.internal.ImageDetectReply.bbox', index=5,
      number=6, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=721,
  serialized_end=867,
)


_IMAGECLASSIFYREQUEST = _descriptor.Descriptor(
  name='ImageClassifyRequest',
  full_name='com.abcft.algorithm.grpc.internal.ImageClassifyRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='com.abcft.algorithm.grpc.internal.ImageClassifyRequest.data', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='url', full_name='com.abcft.algorithm.grpc.internal.ImageClassifyRequest.url', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='id', full_name='com.abcft.algorithm.grpc.internal.ImageClassifyRequest.id', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='file', full_name='com.abcft.algorithm.grpc.internal.ImageClassifyRequest.file',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=869,
  serialized_end=942,
)


_IMAGECLASSIFYREPLY_CLASSIFYRESULT = _descriptor.Descriptor(
  name='ClassifyResult',
  full_name='com.abcft.algorithm.grpc.internal.ImageClassifyReply.ClassifyResult',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='type', full_name='com.abcft.algorithm.grpc.internal.ImageClassifyReply.ClassifyResult.type', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='score', full_name='com.abcft.algorithm.grpc.internal.ImageClassifyReply.ClassifyResult.score', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1179,
  serialized_end=1270,
)

_IMAGECLASSIFYREPLY = _descriptor.Descriptor(
  name='ImageClassifyReply',
  full_name='com.abcft.algorithm.grpc.internal.ImageClassifyReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ok', full_name='com.abcft.algorithm.grpc.internal.ImageClassifyReply.ok', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='code', full_name='com.abcft.algorithm.grpc.internal.ImageClassifyReply.code', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='msg', full_name='com.abcft.algorithm.grpc.internal.ImageClassifyReply.msg', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='type', full_name='com.abcft.algorithm.grpc.internal.ImageClassifyReply.type', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='score', full_name='com.abcft.algorithm.grpc.internal.ImageClassifyReply.score', index=4,
      number=5, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='id', full_name='com.abcft.algorithm.grpc.internal.ImageClassifyReply.id', index=5,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='result', full_name='com.abcft.algorithm.grpc.internal.ImageClassifyReply.result', index=6,
      number=7, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_IMAGECLASSIFYREPLY_CLASSIFYRESULT, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=945,
  serialized_end=1270,
)


_TITLECLASSIFYREQUEST = _descriptor.Descriptor(
  name='TitleClassifyRequest',
  full_name='com.abcft.algorithm.grpc.internal.TitleClassifyRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='category', full_name='com.abcft.algorithm.grpc.internal.TitleClassifyRequest.category', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='first_class', full_name='com.abcft.algorithm.grpc.internal.TitleClassifyRequest.first_class', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='text', full_name='com.abcft.algorithm.grpc.internal.TitleClassifyRequest.text', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='title', full_name='com.abcft.algorithm.grpc.internal.TitleClassifyRequest.title', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1272,
  serialized_end=1362,
)


_TITLECLASSIFYREPLY = _descriptor.Descriptor(
  name='TitleClassifyReply',
  full_name='com.abcft.algorithm.grpc.internal.TitleClassifyReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ok', full_name='com.abcft.algorithm.grpc.internal.TitleClassifyReply.ok', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='code', full_name='com.abcft.algorithm.grpc.internal.TitleClassifyReply.code', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='msg', full_name='com.abcft.algorithm.grpc.internal.TitleClassifyReply.msg', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='classify_code', full_name='com.abcft.algorithm.grpc.internal.TitleClassifyReply.classify_code', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='classify_class1', full_name='com.abcft.algorithm.grpc.internal.TitleClassifyReply.classify_class1', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='classify_class2', full_name='com.abcft.algorithm.grpc.internal.TitleClassifyReply.classify_class2', index=5,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='classify_class3', full_name='com.abcft.algorithm.grpc.internal.TitleClassifyReply.classify_class3', index=6,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1365,
  serialized_end=1522,
)


_BITMAPTABLEREQUEST = _descriptor.Descriptor(
  name='BitmapTableRequest',
  full_name='com.abcft.algorithm.grpc.internal.BitmapTableRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='com.abcft.algorithm.grpc.internal.BitmapTableRequest.data', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='url', full_name='com.abcft.algorithm.grpc.internal.BitmapTableRequest.url', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='table_type', full_name='com.abcft.algorithm.grpc.internal.BitmapTableRequest.table_type', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='use_ocr', full_name='com.abcft.algorithm.grpc.internal.BitmapTableRequest.use_ocr', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='format', full_name='com.abcft.algorithm.grpc.internal.BitmapTableRequest.format', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ocr_engine', full_name='com.abcft.algorithm.grpc.internal.BitmapTableRequest.ocr_engine', index=5,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='options', full_name='com.abcft.algorithm.grpc.internal.BitmapTableRequest.options', index=6,
      number=7, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='file', full_name='com.abcft.algorithm.grpc.internal.BitmapTableRequest.file',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=1525,
  serialized_end=1674,
)


_BITMAPTABLEREPLY = _descriptor.Descriptor(
  name='BitmapTableReply',
  full_name='com.abcft.algorithm.grpc.internal.BitmapTableReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ok', full_name='com.abcft.algorithm.grpc.internal.BitmapTableReply.ok', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='code', full_name='com.abcft.algorithm.grpc.internal.BitmapTableReply.code', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='msg', full_name='com.abcft.algorithm.grpc.internal.BitmapTableReply.msg', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='parsed', full_name='com.abcft.algorithm.grpc.internal.BitmapTableReply.parsed', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bbox', full_name='com.abcft.algorithm.grpc.internal.BitmapTableReply.bbox', index=4,
      number=5, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1676,
  serialized_end=1763,
)


_BITMAPCHARTREQUEST = _descriptor.Descriptor(
  name='BitmapChartRequest',
  full_name='com.abcft.algorithm.grpc.internal.BitmapChartRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='com.abcft.algorithm.grpc.internal.BitmapChartRequest.data', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='url', full_name='com.abcft.algorithm.grpc.internal.BitmapChartRequest.url', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='chart_types', full_name='com.abcft.algorithm.grpc.internal.BitmapChartRequest.chart_types', index=2,
      number=3, type=5, cpp_type=1, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='file', full_name='com.abcft.algorithm.grpc.internal.BitmapChartRequest.file',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=1765,
  serialized_end=1845,
)


_BITMAPCHARTREPLY = _descriptor.Descriptor(
  name='BitmapChartReply',
  full_name='com.abcft.algorithm.grpc.internal.BitmapChartReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ok', full_name='com.abcft.algorithm.grpc.internal.BitmapChartReply.ok', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='code', full_name='com.abcft.algorithm.grpc.internal.BitmapChartReply.code', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='msg', full_name='com.abcft.algorithm.grpc.internal.BitmapChartReply.msg', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='parsed', full_name='com.abcft.algorithm.grpc.internal.BitmapChartReply.parsed', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1847,
  serialized_end=1920,
)


_TESSERACTREQUEST = _descriptor.Descriptor(
  name='TesseractRequest',
  full_name='com.abcft.algorithm.grpc.internal.TesseractRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='com.abcft.algorithm.grpc.internal.TesseractRequest.data', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='url', full_name='com.abcft.algorithm.grpc.internal.TesseractRequest.url', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='file', full_name='com.abcft.algorithm.grpc.internal.TesseractRequest.file',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=1922,
  serialized_end=1979,
)


_TESSERACTREPLY = _descriptor.Descriptor(
  name='TesseractReply',
  full_name='com.abcft.algorithm.grpc.internal.TesseractReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ok', full_name='com.abcft.algorithm.grpc.internal.TesseractReply.ok', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='code', full_name='com.abcft.algorithm.grpc.internal.TesseractReply.code', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='msg', full_name='com.abcft.algorithm.grpc.internal.TesseractReply.msg', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='text', full_name='com.abcft.algorithm.grpc.internal.TesseractReply.text', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='type', full_name='com.abcft.algorithm.grpc.internal.TesseractReply.type', index=4,
      number=5, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bbox', full_name='com.abcft.algorithm.grpc.internal.TesseractReply.bbox', index=5,
      number=6, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1981,
  serialized_end=2078,
)


_CHARTDETECTREQUEST = _descriptor.Descriptor(
  name='ChartDetectRequest',
  full_name='com.abcft.algorithm.grpc.internal.ChartDetectRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='com.abcft.algorithm.grpc.internal.ChartDetectRequest.data', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='url', full_name='com.abcft.algorithm.grpc.internal.ChartDetectRequest.url', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='file', full_name='com.abcft.algorithm.grpc.internal.ChartDetectRequest.file',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=2080,
  serialized_end=2139,
)


_CHARTDETECTREPLY = _descriptor.Descriptor(
  name='ChartDetectReply',
  full_name='com.abcft.algorithm.grpc.internal.ChartDetectReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ok', full_name='com.abcft.algorithm.grpc.internal.ChartDetectReply.ok', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='code', full_name='com.abcft.algorithm.grpc.internal.ChartDetectReply.code', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='msg', full_name='com.abcft.algorithm.grpc.internal.ChartDetectReply.msg', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='type', full_name='com.abcft.algorithm.grpc.internal.ChartDetectReply.type', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='score', full_name='com.abcft.algorithm.grpc.internal.ChartDetectReply.score', index=4,
      number=5, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bbox', full_name='com.abcft.algorithm.grpc.internal.ChartDetectReply.bbox', index=5,
      number=6, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2141,
  serialized_end=2241,
)


_TEXTCLASSIFYREQUEST = _descriptor.Descriptor(
  name='TextClassifyRequest',
  full_name='com.abcft.algorithm.grpc.internal.TextClassifyRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='fulltext', full_name='com.abcft.algorithm.grpc.internal.TextClassifyRequest.fulltext', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2243,
  serialized_end=2282,
)


_TEXTCLASSIFYREPLY = _descriptor.Descriptor(
  name='TextClassifyReply',
  full_name='com.abcft.algorithm.grpc.internal.TextClassifyReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ok', full_name='com.abcft.algorithm.grpc.internal.TextClassifyReply.ok', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='code', full_name='com.abcft.algorithm.grpc.internal.TextClassifyReply.code', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='msg', full_name='com.abcft.algorithm.grpc.internal.TextClassifyReply.msg', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='language', full_name='com.abcft.algorithm.grpc.internal.TextClassifyReply.language', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='type', full_name='com.abcft.algorithm.grpc.internal.TextClassifyReply.type', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2284,
  serialized_end=2374,
)


_ALLENNLPREQUEST = _descriptor.Descriptor(
  name='AllennlpRequest',
  full_name='com.abcft.algorithm.grpc.internal.AllennlpRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='passage', full_name='com.abcft.algorithm.grpc.internal.AllennlpRequest.passage', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='question', full_name='com.abcft.algorithm.grpc.internal.AllennlpRequest.question', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2376,
  serialized_end=2428,
)


_ALLENNLPREPLY = _descriptor.Descriptor(
  name='AllennlpReply',
  full_name='com.abcft.algorithm.grpc.internal.AllennlpReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ok', full_name='com.abcft.algorithm.grpc.internal.AllennlpReply.ok', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='code', full_name='com.abcft.algorithm.grpc.internal.AllennlpReply.code', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='msg', full_name='com.abcft.algorithm.grpc.internal.AllennlpReply.msg', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='result', full_name='com.abcft.algorithm.grpc.internal.AllennlpReply.result', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2430,
  serialized_end=2500,
)

_VERSIONSREPLY.fields_by_name['versions'].message_type = _VERSIONINFO
_METHODSREPLY.fields_by_name['methods'].message_type = _METHODINFO
_RPCREQUEST.oneofs_by_name['file'].fields.append(
  _RPCREQUEST.fields_by_name['data'])
_RPCREQUEST.fields_by_name['data'].containing_oneof = _RPCREQUEST.oneofs_by_name['file']
_RPCREQUEST.oneofs_by_name['file'].fields.append(
  _RPCREQUEST.fields_by_name['url'])
_RPCREQUEST.fields_by_name['url'].containing_oneof = _RPCREQUEST.oneofs_by_name['file']
_IMAGEDETECTREQUEST.oneofs_by_name['file'].fields.append(
  _IMAGEDETECTREQUEST.fields_by_name['data'])
_IMAGEDETECTREQUEST.fields_by_name['data'].containing_oneof = _IMAGEDETECTREQUEST.oneofs_by_name['file']
_IMAGEDETECTREQUEST.oneofs_by_name['file'].fields.append(
  _IMAGEDETECTREQUEST.fields_by_name['url'])
_IMAGEDETECTREQUEST.fields_by_name['url'].containing_oneof = _IMAGEDETECTREQUEST.oneofs_by_name['file']
_IMAGEDETECTREPLY.fields_by_name['type'].enum_type = _IMAGETYPE
_IMAGECLASSIFYREQUEST.oneofs_by_name['file'].fields.append(
  _IMAGECLASSIFYREQUEST.fields_by_name['data'])
_IMAGECLASSIFYREQUEST.fields_by_name['data'].containing_oneof = _IMAGECLASSIFYREQUEST.oneofs_by_name['file']
_IMAGECLASSIFYREQUEST.oneofs_by_name['file'].fields.append(
  _IMAGECLASSIFYREQUEST.fields_by_name['url'])
_IMAGECLASSIFYREQUEST.fields_by_name['url'].containing_oneof = _IMAGECLASSIFYREQUEST.oneofs_by_name['file']
_IMAGECLASSIFYREPLY_CLASSIFYRESULT.fields_by_name['type'].enum_type = _IMAGETYPE
_IMAGECLASSIFYREPLY_CLASSIFYRESULT.containing_type = _IMAGECLASSIFYREPLY
_IMAGECLASSIFYREPLY.fields_by_name['type'].enum_type = _IMAGETYPE
_IMAGECLASSIFYREPLY.fields_by_name['result'].message_type = _IMAGECLASSIFYREPLY_CLASSIFYRESULT
_BITMAPTABLEREQUEST.oneofs_by_name['file'].fields.append(
  _BITMAPTABLEREQUEST.fields_by_name['data'])
_BITMAPTABLEREQUEST.fields_by_name['data'].containing_oneof = _BITMAPTABLEREQUEST.oneofs_by_name['file']
_BITMAPTABLEREQUEST.oneofs_by_name['file'].fields.append(
  _BITMAPTABLEREQUEST.fields_by_name['url'])
_BITMAPTABLEREQUEST.fields_by_name['url'].containing_oneof = _BITMAPTABLEREQUEST.oneofs_by_name['file']
_BITMAPCHARTREQUEST.oneofs_by_name['file'].fields.append(
  _BITMAPCHARTREQUEST.fields_by_name['data'])
_BITMAPCHARTREQUEST.fields_by_name['data'].containing_oneof = _BITMAPCHARTREQUEST.oneofs_by_name['file']
_BITMAPCHARTREQUEST.oneofs_by_name['file'].fields.append(
  _BITMAPCHARTREQUEST.fields_by_name['url'])
_BITMAPCHARTREQUEST.fields_by_name['url'].containing_oneof = _BITMAPCHARTREQUEST.oneofs_by_name['file']
_TESSERACTREQUEST.oneofs_by_name['file'].fields.append(
  _TESSERACTREQUEST.fields_by_name['data'])
_TESSERACTREQUEST.fields_by_name['data'].containing_oneof = _TESSERACTREQUEST.oneofs_by_name['file']
_TESSERACTREQUEST.oneofs_by_name['file'].fields.append(
  _TESSERACTREQUEST.fields_by_name['url'])
_TESSERACTREQUEST.fields_by_name['url'].containing_oneof = _TESSERACTREQUEST.oneofs_by_name['file']
_CHARTDETECTREQUEST.oneofs_by_name['file'].fields.append(
  _CHARTDETECTREQUEST.fields_by_name['data'])
_CHARTDETECTREQUEST.fields_by_name['data'].containing_oneof = _CHARTDETECTREQUEST.oneofs_by_name['file']
_CHARTDETECTREQUEST.oneofs_by_name['file'].fields.append(
  _CHARTDETECTREQUEST.fields_by_name['url'])
_CHARTDETECTREQUEST.fields_by_name['url'].containing_oneof = _CHARTDETECTREQUEST.oneofs_by_name['file']
DESCRIPTOR.message_types_by_name['PingReply'] = _PINGREPLY
DESCRIPTOR.message_types_by_name['VersionInfo'] = _VERSIONINFO
DESCRIPTOR.message_types_by_name['VersionsReply'] = _VERSIONSREPLY
DESCRIPTOR.message_types_by_name['MethodInfo'] = _METHODINFO
DESCRIPTOR.message_types_by_name['MethodsReply'] = _METHODSREPLY
DESCRIPTOR.message_types_by_name['RpcRequest'] = _RPCREQUEST
DESCRIPTOR.message_types_by_name['RpcReply'] = _RPCREPLY
DESCRIPTOR.message_types_by_name['ImageDetectRequest'] = _IMAGEDETECTREQUEST
DESCRIPTOR.message_types_by_name['ImageDetectReply'] = _IMAGEDETECTREPLY
DESCRIPTOR.message_types_by_name['ImageClassifyRequest'] = _IMAGECLASSIFYREQUEST
DESCRIPTOR.message_types_by_name['ImageClassifyReply'] = _IMAGECLASSIFYREPLY
DESCRIPTOR.message_types_by_name['TitleClassifyRequest'] = _TITLECLASSIFYREQUEST
DESCRIPTOR.message_types_by_name['TitleClassifyReply'] = _TITLECLASSIFYREPLY
DESCRIPTOR.message_types_by_name['BitmapTableRequest'] = _BITMAPTABLEREQUEST
DESCRIPTOR.message_types_by_name['BitmapTableReply'] = _BITMAPTABLEREPLY
DESCRIPTOR.message_types_by_name['BitmapChartRequest'] = _BITMAPCHARTREQUEST
DESCRIPTOR.message_types_by_name['BitmapChartReply'] = _BITMAPCHARTREPLY
DESCRIPTOR.message_types_by_name['TesseractRequest'] = _TESSERACTREQUEST
DESCRIPTOR.message_types_by_name['TesseractReply'] = _TESSERACTREPLY
DESCRIPTOR.message_types_by_name['ChartDetectRequest'] = _CHARTDETECTREQUEST
DESCRIPTOR.message_types_by_name['ChartDetectReply'] = _CHARTDETECTREPLY
DESCRIPTOR.message_types_by_name['TextClassifyRequest'] = _TEXTCLASSIFYREQUEST
DESCRIPTOR.message_types_by_name['TextClassifyReply'] = _TEXTCLASSIFYREPLY
DESCRIPTOR.message_types_by_name['AllennlpRequest'] = _ALLENNLPREQUEST
DESCRIPTOR.message_types_by_name['AllennlpReply'] = _ALLENNLPREPLY
DESCRIPTOR.enum_types_by_name['ImageType'] = _IMAGETYPE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

PingReply = _reflection.GeneratedProtocolMessageType('PingReply', (_message.Message,), dict(
  DESCRIPTOR = _PINGREPLY,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.PingReply)
  ))
_sym_db.RegisterMessage(PingReply)

VersionInfo = _reflection.GeneratedProtocolMessageType('VersionInfo', (_message.Message,), dict(
  DESCRIPTOR = _VERSIONINFO,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.VersionInfo)
  ))
_sym_db.RegisterMessage(VersionInfo)

VersionsReply = _reflection.GeneratedProtocolMessageType('VersionsReply', (_message.Message,), dict(
  DESCRIPTOR = _VERSIONSREPLY,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.VersionsReply)
  ))
_sym_db.RegisterMessage(VersionsReply)

MethodInfo = _reflection.GeneratedProtocolMessageType('MethodInfo', (_message.Message,), dict(
  DESCRIPTOR = _METHODINFO,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.MethodInfo)
  ))
_sym_db.RegisterMessage(MethodInfo)

MethodsReply = _reflection.GeneratedProtocolMessageType('MethodsReply', (_message.Message,), dict(
  DESCRIPTOR = _METHODSREPLY,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.MethodsReply)
  ))
_sym_db.RegisterMessage(MethodsReply)

RpcRequest = _reflection.GeneratedProtocolMessageType('RpcRequest', (_message.Message,), dict(
  DESCRIPTOR = _RPCREQUEST,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.RpcRequest)
  ))
_sym_db.RegisterMessage(RpcRequest)

RpcReply = _reflection.GeneratedProtocolMessageType('RpcReply', (_message.Message,), dict(
  DESCRIPTOR = _RPCREPLY,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.RpcReply)
  ))
_sym_db.RegisterMessage(RpcReply)

ImageDetectRequest = _reflection.GeneratedProtocolMessageType('ImageDetectRequest', (_message.Message,), dict(
  DESCRIPTOR = _IMAGEDETECTREQUEST,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.ImageDetectRequest)
  ))
_sym_db.RegisterMessage(ImageDetectRequest)

ImageDetectReply = _reflection.GeneratedProtocolMessageType('ImageDetectReply', (_message.Message,), dict(
  DESCRIPTOR = _IMAGEDETECTREPLY,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.ImageDetectReply)
  ))
_sym_db.RegisterMessage(ImageDetectReply)

ImageClassifyRequest = _reflection.GeneratedProtocolMessageType('ImageClassifyRequest', (_message.Message,), dict(
  DESCRIPTOR = _IMAGECLASSIFYREQUEST,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.ImageClassifyRequest)
  ))
_sym_db.RegisterMessage(ImageClassifyRequest)

ImageClassifyReply = _reflection.GeneratedProtocolMessageType('ImageClassifyReply', (_message.Message,), dict(

  ClassifyResult = _reflection.GeneratedProtocolMessageType('ClassifyResult', (_message.Message,), dict(
    DESCRIPTOR = _IMAGECLASSIFYREPLY_CLASSIFYRESULT,
    __module__ = 'algorithm_internal_rpc_pb2'
    # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.ImageClassifyReply.ClassifyResult)
    ))
  ,
  DESCRIPTOR = _IMAGECLASSIFYREPLY,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.ImageClassifyReply)
  ))
_sym_db.RegisterMessage(ImageClassifyReply)
_sym_db.RegisterMessage(ImageClassifyReply.ClassifyResult)

TitleClassifyRequest = _reflection.GeneratedProtocolMessageType('TitleClassifyRequest', (_message.Message,), dict(
  DESCRIPTOR = _TITLECLASSIFYREQUEST,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.TitleClassifyRequest)
  ))
_sym_db.RegisterMessage(TitleClassifyRequest)

TitleClassifyReply = _reflection.GeneratedProtocolMessageType('TitleClassifyReply', (_message.Message,), dict(
  DESCRIPTOR = _TITLECLASSIFYREPLY,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.TitleClassifyReply)
  ))
_sym_db.RegisterMessage(TitleClassifyReply)

BitmapTableRequest = _reflection.GeneratedProtocolMessageType('BitmapTableRequest', (_message.Message,), dict(
  DESCRIPTOR = _BITMAPTABLEREQUEST,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.BitmapTableRequest)
  ))
_sym_db.RegisterMessage(BitmapTableRequest)

BitmapTableReply = _reflection.GeneratedProtocolMessageType('BitmapTableReply', (_message.Message,), dict(
  DESCRIPTOR = _BITMAPTABLEREPLY,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.BitmapTableReply)
  ))
_sym_db.RegisterMessage(BitmapTableReply)

BitmapChartRequest = _reflection.GeneratedProtocolMessageType('BitmapChartRequest', (_message.Message,), dict(
  DESCRIPTOR = _BITMAPCHARTREQUEST,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.BitmapChartRequest)
  ))
_sym_db.RegisterMessage(BitmapChartRequest)

BitmapChartReply = _reflection.GeneratedProtocolMessageType('BitmapChartReply', (_message.Message,), dict(
  DESCRIPTOR = _BITMAPCHARTREPLY,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.BitmapChartReply)
  ))
_sym_db.RegisterMessage(BitmapChartReply)

TesseractRequest = _reflection.GeneratedProtocolMessageType('TesseractRequest', (_message.Message,), dict(
  DESCRIPTOR = _TESSERACTREQUEST,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.TesseractRequest)
  ))
_sym_db.RegisterMessage(TesseractRequest)

TesseractReply = _reflection.GeneratedProtocolMessageType('TesseractReply', (_message.Message,), dict(
  DESCRIPTOR = _TESSERACTREPLY,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.TesseractReply)
  ))
_sym_db.RegisterMessage(TesseractReply)

ChartDetectRequest = _reflection.GeneratedProtocolMessageType('ChartDetectRequest', (_message.Message,), dict(
  DESCRIPTOR = _CHARTDETECTREQUEST,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.ChartDetectRequest)
  ))
_sym_db.RegisterMessage(ChartDetectRequest)

ChartDetectReply = _reflection.GeneratedProtocolMessageType('ChartDetectReply', (_message.Message,), dict(
  DESCRIPTOR = _CHARTDETECTREPLY,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.ChartDetectReply)
  ))
_sym_db.RegisterMessage(ChartDetectReply)

TextClassifyRequest = _reflection.GeneratedProtocolMessageType('TextClassifyRequest', (_message.Message,), dict(
  DESCRIPTOR = _TEXTCLASSIFYREQUEST,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.TextClassifyRequest)
  ))
_sym_db.RegisterMessage(TextClassifyRequest)

TextClassifyReply = _reflection.GeneratedProtocolMessageType('TextClassifyReply', (_message.Message,), dict(
  DESCRIPTOR = _TEXTCLASSIFYREPLY,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.TextClassifyReply)
  ))
_sym_db.RegisterMessage(TextClassifyReply)

AllennlpRequest = _reflection.GeneratedProtocolMessageType('AllennlpRequest', (_message.Message,), dict(
  DESCRIPTOR = _ALLENNLPREQUEST,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.AllennlpRequest)
  ))
_sym_db.RegisterMessage(AllennlpRequest)

AllennlpReply = _reflection.GeneratedProtocolMessageType('AllennlpReply', (_message.Message,), dict(
  DESCRIPTOR = _ALLENNLPREPLY,
  __module__ = 'algorithm_internal_rpc_pb2'
  # @@protoc_insertion_point(class_scope:com.abcft.algorithm.grpc.internal.AllennlpReply)
  ))
_sym_db.RegisterMessage(AllennlpReply)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class AlgorithmInternalServiceStub(object):
    """Algorithm Internal RPC service
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Ping = channel.unary_unary(
          '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/Ping',
          request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
          response_deserializer=PingReply.FromString,
          )
      self.GetVersions = channel.unary_unary(
          '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/GetVersions',
          request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
          response_deserializer=VersionsReply.FromString,
          )
      self.ListMethods = channel.unary_unary(
          '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/ListMethods',
          request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
          response_deserializer=MethodsReply.FromString,
          )
      self.Request = channel.unary_stream(
          '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/Request',
          request_serializer=RpcRequest.SerializeToString,
          response_deserializer=RpcReply.FromString,
          )
      self.ImageDetect = channel.unary_stream(
          '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/ImageDetect',
          request_serializer=ImageDetectRequest.SerializeToString,
          response_deserializer=ImageDetectReply.FromString,
          )
      self.ImageClassify = channel.unary_stream(
          '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/ImageClassify',
          request_serializer=ImageClassifyRequest.SerializeToString,
          response_deserializer=ImageClassifyReply.FromString,
          )
      self.ImageClassifyBatch = channel.stream_stream(
          '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/ImageClassifyBatch',
          request_serializer=ImageClassifyRequest.SerializeToString,
          response_deserializer=ImageClassifyReply.FromString,
          )
      self.TitleClassify = channel.unary_stream(
          '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/TitleClassify',
          request_serializer=TitleClassifyRequest.SerializeToString,
          response_deserializer=TitleClassifyReply.FromString,
          )
      self.BitmapTableParse = channel.unary_stream(
          '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/BitmapTableParse',
          request_serializer=BitmapTableRequest.SerializeToString,
          response_deserializer=BitmapTableReply.FromString,
          )
      self.BitmapTableParseBatch = channel.unary_stream(
          '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/BitmapTableParseBatch',
          request_serializer=BitmapTableRequest.SerializeToString,
          response_deserializer=BitmapTableReply.FromString,
          )
      self.BitmapChartParse = channel.unary_stream(
          '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/BitmapChartParse',
          request_serializer=BitmapChartRequest.SerializeToString,
          response_deserializer=BitmapChartReply.FromString,
          )
      self.TesseractDetectText = channel.unary_stream(
          '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/TesseractDetectText',
          request_serializer=TesseractRequest.SerializeToString,
          response_deserializer=TesseractReply.FromString,
          )
      self.ChartDetect = channel.unary_stream(
          '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/ChartDetect',
          request_serializer=ChartDetectRequest.SerializeToString,
          response_deserializer=ChartDetectReply.FromString,
          )
      self.TextClassify = channel.unary_stream(
          '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/TextClassify',
          request_serializer=TextClassifyRequest.SerializeToString,
          response_deserializer=TextClassifyReply.FromString,
          )
      self.Allennlp = channel.unary_stream(
          '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/Allennlp',
          request_serializer=AllennlpRequest.SerializeToString,
          response_deserializer=AllennlpReply.FromString,
          )


  class AlgorithmInternalServiceServicer(object):
    """Algorithm Internal RPC service
    """

    def Ping(self, request, context):
      """Ping the server
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetVersions(self, request, context):
      """Retrieve the version of algorithms
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ListMethods(self, request, context):
      """Retrieve the methods of the service
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Request(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ImageDetect(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ImageClassify(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ImageClassifyBatch(self, request_iterator, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def TitleClassify(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def BitmapTableParse(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def BitmapTableParseBatch(self, request, context):
      """for scan images
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def BitmapChartParse(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def TesseractDetectText(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ChartDetect(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def TextClassify(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Allennlp(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_AlgorithmInternalServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Ping': grpc.unary_unary_rpc_method_handler(
            servicer.Ping,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=PingReply.SerializeToString,
        ),
        'GetVersions': grpc.unary_unary_rpc_method_handler(
            servicer.GetVersions,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=VersionsReply.SerializeToString,
        ),
        'ListMethods': grpc.unary_unary_rpc_method_handler(
            servicer.ListMethods,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=MethodsReply.SerializeToString,
        ),
        'Request': grpc.unary_stream_rpc_method_handler(
            servicer.Request,
            request_deserializer=RpcRequest.FromString,
            response_serializer=RpcReply.SerializeToString,
        ),
        'ImageDetect': grpc.unary_stream_rpc_method_handler(
            servicer.ImageDetect,
            request_deserializer=ImageDetectRequest.FromString,
            response_serializer=ImageDetectReply.SerializeToString,
        ),
        'ImageClassify': grpc.unary_stream_rpc_method_handler(
            servicer.ImageClassify,
            request_deserializer=ImageClassifyRequest.FromString,
            response_serializer=ImageClassifyReply.SerializeToString,
        ),
        'ImageClassifyBatch': grpc.stream_stream_rpc_method_handler(
            servicer.ImageClassifyBatch,
            request_deserializer=ImageClassifyRequest.FromString,
            response_serializer=ImageClassifyReply.SerializeToString,
        ),
        'TitleClassify': grpc.unary_stream_rpc_method_handler(
            servicer.TitleClassify,
            request_deserializer=TitleClassifyRequest.FromString,
            response_serializer=TitleClassifyReply.SerializeToString,
        ),
        'BitmapTableParse': grpc.unary_stream_rpc_method_handler(
            servicer.BitmapTableParse,
            request_deserializer=BitmapTableRequest.FromString,
            response_serializer=BitmapTableReply.SerializeToString,
        ),
        'BitmapTableParseBatch': grpc.unary_stream_rpc_method_handler(
            servicer.BitmapTableParseBatch,
            request_deserializer=BitmapTableRequest.FromString,
            response_serializer=BitmapTableReply.SerializeToString,
        ),
        'BitmapChartParse': grpc.unary_stream_rpc_method_handler(
            servicer.BitmapChartParse,
            request_deserializer=BitmapChartRequest.FromString,
            response_serializer=BitmapChartReply.SerializeToString,
        ),
        'TesseractDetectText': grpc.unary_stream_rpc_method_handler(
            servicer.TesseractDetectText,
            request_deserializer=TesseractRequest.FromString,
            response_serializer=TesseractReply.SerializeToString,
        ),
        'ChartDetect': grpc.unary_stream_rpc_method_handler(
            servicer.ChartDetect,
            request_deserializer=ChartDetectRequest.FromString,
            response_serializer=ChartDetectReply.SerializeToString,
        ),
        'TextClassify': grpc.unary_stream_rpc_method_handler(
            servicer.TextClassify,
            request_deserializer=TextClassifyRequest.FromString,
            response_serializer=TextClassifyReply.SerializeToString,
        ),
        'Allennlp': grpc.unary_stream_rpc_method_handler(
            servicer.Allennlp,
            request_deserializer=AllennlpRequest.FromString,
            response_serializer=AllennlpReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'com.abcft.algorithm.grpc.internal.AlgorithmInternalService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaAlgorithmInternalServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Algorithm Internal RPC service
    """
    def Ping(self, request, context):
      """Ping the server
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetVersions(self, request, context):
      """Retrieve the version of algorithms
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ListMethods(self, request, context):
      """Retrieve the methods of the service
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Request(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ImageDetect(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ImageClassify(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ImageClassifyBatch(self, request_iterator, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def TitleClassify(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def BitmapTableParse(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def BitmapTableParseBatch(self, request, context):
      """for scan images
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def BitmapChartParse(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def TesseractDetectText(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ChartDetect(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def TextClassify(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Allennlp(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaAlgorithmInternalServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Algorithm Internal RPC service
    """
    def Ping(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Ping the server
      """
      raise NotImplementedError()
    Ping.future = None
    def GetVersions(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Retrieve the version of algorithms
      """
      raise NotImplementedError()
    GetVersions.future = None
    def ListMethods(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Retrieve the methods of the service
      """
      raise NotImplementedError()
    ListMethods.future = None
    def Request(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    def ImageDetect(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    def ImageClassify(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    def ImageClassifyBatch(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    def TitleClassify(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    def BitmapTableParse(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    def BitmapTableParseBatch(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """for scan images
      """
      raise NotImplementedError()
    def BitmapChartParse(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    def TesseractDetectText(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    def ChartDetect(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    def TextClassify(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    def Allennlp(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()


  def beta_create_AlgorithmInternalService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'Allennlp'): AllennlpRequest.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'BitmapChartParse'): BitmapChartRequest.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'BitmapTableParse'): BitmapTableRequest.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'BitmapTableParseBatch'): BitmapTableRequest.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ChartDetect'): ChartDetectRequest.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'GetVersions'): google_dot_protobuf_dot_empty__pb2.Empty.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ImageClassify'): ImageClassifyRequest.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ImageClassifyBatch'): ImageClassifyRequest.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ImageDetect'): ImageDetectRequest.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ListMethods'): google_dot_protobuf_dot_empty__pb2.Empty.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'Ping'): google_dot_protobuf_dot_empty__pb2.Empty.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'Request'): RpcRequest.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'TesseractDetectText'): TesseractRequest.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'TextClassify'): TextClassifyRequest.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'TitleClassify'): TitleClassifyRequest.FromString,
    }
    response_serializers = {
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'Allennlp'): AllennlpReply.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'BitmapChartParse'): BitmapChartReply.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'BitmapTableParse'): BitmapTableReply.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'BitmapTableParseBatch'): BitmapTableReply.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ChartDetect'): ChartDetectReply.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'GetVersions'): VersionsReply.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ImageClassify'): ImageClassifyReply.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ImageClassifyBatch'): ImageClassifyReply.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ImageDetect'): ImageDetectReply.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ListMethods'): MethodsReply.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'Ping'): PingReply.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'Request'): RpcReply.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'TesseractDetectText'): TesseractReply.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'TextClassify'): TextClassifyReply.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'TitleClassify'): TitleClassifyReply.SerializeToString,
    }
    method_implementations = {
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'Allennlp'): face_utilities.unary_stream_inline(servicer.Allennlp),
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'BitmapChartParse'): face_utilities.unary_stream_inline(servicer.BitmapChartParse),
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'BitmapTableParse'): face_utilities.unary_stream_inline(servicer.BitmapTableParse),
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'BitmapTableParseBatch'): face_utilities.unary_stream_inline(servicer.BitmapTableParseBatch),
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ChartDetect'): face_utilities.unary_stream_inline(servicer.ChartDetect),
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'GetVersions'): face_utilities.unary_unary_inline(servicer.GetVersions),
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ImageClassify'): face_utilities.unary_stream_inline(servicer.ImageClassify),
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ImageClassifyBatch'): face_utilities.stream_stream_inline(servicer.ImageClassifyBatch),
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ImageDetect'): face_utilities.unary_stream_inline(servicer.ImageDetect),
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ListMethods'): face_utilities.unary_unary_inline(servicer.ListMethods),
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'Ping'): face_utilities.unary_unary_inline(servicer.Ping),
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'Request'): face_utilities.unary_stream_inline(servicer.Request),
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'TesseractDetectText'): face_utilities.unary_stream_inline(servicer.TesseractDetectText),
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'TextClassify'): face_utilities.unary_stream_inline(servicer.TextClassify),
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'TitleClassify'): face_utilities.unary_stream_inline(servicer.TitleClassify),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_AlgorithmInternalService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'Allennlp'): AllennlpRequest.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'BitmapChartParse'): BitmapChartRequest.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'BitmapTableParse'): BitmapTableRequest.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'BitmapTableParseBatch'): BitmapTableRequest.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ChartDetect'): ChartDetectRequest.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'GetVersions'): google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ImageClassify'): ImageClassifyRequest.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ImageClassifyBatch'): ImageClassifyRequest.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ImageDetect'): ImageDetectRequest.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ListMethods'): google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'Ping'): google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'Request'): RpcRequest.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'TesseractDetectText'): TesseractRequest.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'TextClassify'): TextClassifyRequest.SerializeToString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'TitleClassify'): TitleClassifyRequest.SerializeToString,
    }
    response_deserializers = {
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'Allennlp'): AllennlpReply.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'BitmapChartParse'): BitmapChartReply.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'BitmapTableParse'): BitmapTableReply.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'BitmapTableParseBatch'): BitmapTableReply.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ChartDetect'): ChartDetectReply.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'GetVersions'): VersionsReply.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ImageClassify'): ImageClassifyReply.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ImageClassifyBatch'): ImageClassifyReply.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ImageDetect'): ImageDetectReply.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'ListMethods'): MethodsReply.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'Ping'): PingReply.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'Request'): RpcReply.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'TesseractDetectText'): TesseractReply.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'TextClassify'): TextClassifyReply.FromString,
      ('com.abcft.algorithm.grpc.internal.AlgorithmInternalService', 'TitleClassify'): TitleClassifyReply.FromString,
    }
    cardinalities = {
      'Allennlp': cardinality.Cardinality.UNARY_STREAM,
      'BitmapChartParse': cardinality.Cardinality.UNARY_STREAM,
      'BitmapTableParse': cardinality.Cardinality.UNARY_STREAM,
      'BitmapTableParseBatch': cardinality.Cardinality.UNARY_STREAM,
      'ChartDetect': cardinality.Cardinality.UNARY_STREAM,
      'GetVersions': cardinality.Cardinality.UNARY_UNARY,
      'ImageClassify': cardinality.Cardinality.UNARY_STREAM,
      'ImageClassifyBatch': cardinality.Cardinality.STREAM_STREAM,
      'ImageDetect': cardinality.Cardinality.UNARY_STREAM,
      'ListMethods': cardinality.Cardinality.UNARY_UNARY,
      'Ping': cardinality.Cardinality.UNARY_UNARY,
      'Request': cardinality.Cardinality.UNARY_STREAM,
      'TesseractDetectText': cardinality.Cardinality.UNARY_STREAM,
      'TextClassify': cardinality.Cardinality.UNARY_STREAM,
      'TitleClassify': cardinality.Cardinality.UNARY_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'com.abcft.algorithm.grpc.internal.AlgorithmInternalService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
