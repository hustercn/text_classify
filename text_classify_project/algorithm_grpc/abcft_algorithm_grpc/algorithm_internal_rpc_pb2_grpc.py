# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import algorithm_internal_rpc_pb2 as algorithm__internal__rpc__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class AlgorithmInternalServiceStub(object):
  """Algorithm Internal RPC service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Ping = channel.unary_unary(
        '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/Ping',
        request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        response_deserializer=algorithm__internal__rpc__pb2.PingReply.FromString,
        )
    self.GetVersions = channel.unary_unary(
        '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/GetVersions',
        request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        response_deserializer=algorithm__internal__rpc__pb2.VersionsReply.FromString,
        )
    self.ListMethods = channel.unary_unary(
        '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/ListMethods',
        request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        response_deserializer=algorithm__internal__rpc__pb2.MethodsReply.FromString,
        )
    self.Request = channel.unary_stream(
        '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/Request',
        request_serializer=algorithm__internal__rpc__pb2.RpcRequest.SerializeToString,
        response_deserializer=algorithm__internal__rpc__pb2.RpcReply.FromString,
        )
    self.ImageDetect = channel.unary_stream(
        '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/ImageDetect',
        request_serializer=algorithm__internal__rpc__pb2.ImageDetectRequest.SerializeToString,
        response_deserializer=algorithm__internal__rpc__pb2.ImageDetectReply.FromString,
        )
    self.ImageClassify = channel.unary_stream(
        '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/ImageClassify',
        request_serializer=algorithm__internal__rpc__pb2.ImageClassifyRequest.SerializeToString,
        response_deserializer=algorithm__internal__rpc__pb2.ImageClassifyReply.FromString,
        )
    self.ImageClassifyBatch = channel.stream_stream(
        '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/ImageClassifyBatch',
        request_serializer=algorithm__internal__rpc__pb2.ImageClassifyRequest.SerializeToString,
        response_deserializer=algorithm__internal__rpc__pb2.ImageClassifyReply.FromString,
        )
    self.TitleClassify = channel.unary_stream(
        '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/TitleClassify',
        request_serializer=algorithm__internal__rpc__pb2.TitleClassifyRequest.SerializeToString,
        response_deserializer=algorithm__internal__rpc__pb2.TitleClassifyReply.FromString,
        )
    self.BitmapTableParse = channel.unary_stream(
        '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/BitmapTableParse',
        request_serializer=algorithm__internal__rpc__pb2.BitmapTableRequest.SerializeToString,
        response_deserializer=algorithm__internal__rpc__pb2.BitmapTableReply.FromString,
        )
    self.BitmapTableParseBatch = channel.unary_stream(
        '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/BitmapTableParseBatch',
        request_serializer=algorithm__internal__rpc__pb2.BitmapTableRequest.SerializeToString,
        response_deserializer=algorithm__internal__rpc__pb2.BitmapTableReply.FromString,
        )
    self.BitmapChartParse = channel.unary_stream(
        '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/BitmapChartParse',
        request_serializer=algorithm__internal__rpc__pb2.BitmapChartRequest.SerializeToString,
        response_deserializer=algorithm__internal__rpc__pb2.BitmapChartReply.FromString,
        )
    self.TesseractDetectText = channel.unary_stream(
        '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/TesseractDetectText',
        request_serializer=algorithm__internal__rpc__pb2.TesseractRequest.SerializeToString,
        response_deserializer=algorithm__internal__rpc__pb2.TesseractReply.FromString,
        )
    self.ChartDetect = channel.unary_stream(
        '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/ChartDetect',
        request_serializer=algorithm__internal__rpc__pb2.ChartDetectRequest.SerializeToString,
        response_deserializer=algorithm__internal__rpc__pb2.ChartDetectReply.FromString,
        )
    self.TextClassify = channel.unary_stream(
        '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/TextClassify',
        request_serializer=algorithm__internal__rpc__pb2.TextClassifyRequest.SerializeToString,
        response_deserializer=algorithm__internal__rpc__pb2.TextClassifyReply.FromString,
        )
    self.Allennlp = channel.unary_stream(
        '/com.abcft.algorithm.grpc.internal.AlgorithmInternalService/Allennlp',
        request_serializer=algorithm__internal__rpc__pb2.AllennlpRequest.SerializeToString,
        response_deserializer=algorithm__internal__rpc__pb2.AllennlpReply.FromString,
        )


class AlgorithmInternalServiceServicer(object):
  """Algorithm Internal RPC service
  """

  def Ping(self, request, context):
    """Ping the server
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetVersions(self, request, context):
    """Retrieve the version of algorithms
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListMethods(self, request, context):
    """Retrieve the methods of the service
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Request(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ImageDetect(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ImageClassify(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ImageClassifyBatch(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TitleClassify(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BitmapTableParse(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BitmapTableParseBatch(self, request, context):
    """for scan images
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BitmapChartParse(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TesseractDetectText(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ChartDetect(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TextClassify(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Allennlp(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AlgorithmInternalServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Ping': grpc.unary_unary_rpc_method_handler(
          servicer.Ping,
          request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          response_serializer=algorithm__internal__rpc__pb2.PingReply.SerializeToString,
      ),
      'GetVersions': grpc.unary_unary_rpc_method_handler(
          servicer.GetVersions,
          request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          response_serializer=algorithm__internal__rpc__pb2.VersionsReply.SerializeToString,
      ),
      'ListMethods': grpc.unary_unary_rpc_method_handler(
          servicer.ListMethods,
          request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          response_serializer=algorithm__internal__rpc__pb2.MethodsReply.SerializeToString,
      ),
      'Request': grpc.unary_stream_rpc_method_handler(
          servicer.Request,
          request_deserializer=algorithm__internal__rpc__pb2.RpcRequest.FromString,
          response_serializer=algorithm__internal__rpc__pb2.RpcReply.SerializeToString,
      ),
      'ImageDetect': grpc.unary_stream_rpc_method_handler(
          servicer.ImageDetect,
          request_deserializer=algorithm__internal__rpc__pb2.ImageDetectRequest.FromString,
          response_serializer=algorithm__internal__rpc__pb2.ImageDetectReply.SerializeToString,
      ),
      'ImageClassify': grpc.unary_stream_rpc_method_handler(
          servicer.ImageClassify,
          request_deserializer=algorithm__internal__rpc__pb2.ImageClassifyRequest.FromString,
          response_serializer=algorithm__internal__rpc__pb2.ImageClassifyReply.SerializeToString,
      ),
      'ImageClassifyBatch': grpc.stream_stream_rpc_method_handler(
          servicer.ImageClassifyBatch,
          request_deserializer=algorithm__internal__rpc__pb2.ImageClassifyRequest.FromString,
          response_serializer=algorithm__internal__rpc__pb2.ImageClassifyReply.SerializeToString,
      ),
      'TitleClassify': grpc.unary_stream_rpc_method_handler(
          servicer.TitleClassify,
          request_deserializer=algorithm__internal__rpc__pb2.TitleClassifyRequest.FromString,
          response_serializer=algorithm__internal__rpc__pb2.TitleClassifyReply.SerializeToString,
      ),
      'BitmapTableParse': grpc.unary_stream_rpc_method_handler(
          servicer.BitmapTableParse,
          request_deserializer=algorithm__internal__rpc__pb2.BitmapTableRequest.FromString,
          response_serializer=algorithm__internal__rpc__pb2.BitmapTableReply.SerializeToString,
      ),
      'BitmapTableParseBatch': grpc.unary_stream_rpc_method_handler(
          servicer.BitmapTableParseBatch,
          request_deserializer=algorithm__internal__rpc__pb2.BitmapTableRequest.FromString,
          response_serializer=algorithm__internal__rpc__pb2.BitmapTableReply.SerializeToString,
      ),
      'BitmapChartParse': grpc.unary_stream_rpc_method_handler(
          servicer.BitmapChartParse,
          request_deserializer=algorithm__internal__rpc__pb2.BitmapChartRequest.FromString,
          response_serializer=algorithm__internal__rpc__pb2.BitmapChartReply.SerializeToString,
      ),
      'TesseractDetectText': grpc.unary_stream_rpc_method_handler(
          servicer.TesseractDetectText,
          request_deserializer=algorithm__internal__rpc__pb2.TesseractRequest.FromString,
          response_serializer=algorithm__internal__rpc__pb2.TesseractReply.SerializeToString,
      ),
      'ChartDetect': grpc.unary_stream_rpc_method_handler(
          servicer.ChartDetect,
          request_deserializer=algorithm__internal__rpc__pb2.ChartDetectRequest.FromString,
          response_serializer=algorithm__internal__rpc__pb2.ChartDetectReply.SerializeToString,
      ),
      'TextClassify': grpc.unary_stream_rpc_method_handler(
          servicer.TextClassify,
          request_deserializer=algorithm__internal__rpc__pb2.TextClassifyRequest.FromString,
          response_serializer=algorithm__internal__rpc__pb2.TextClassifyReply.SerializeToString,
      ),
      'Allennlp': grpc.unary_stream_rpc_method_handler(
          servicer.Allennlp,
          request_deserializer=algorithm__internal__rpc__pb2.AllennlpRequest.FromString,
          response_serializer=algorithm__internal__rpc__pb2.AllennlpReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'com.abcft.algorithm.grpc.internal.AlgorithmInternalService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
