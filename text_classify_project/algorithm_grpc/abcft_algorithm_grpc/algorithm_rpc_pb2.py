# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: algorithm_rpc.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from google.protobuf import any_pb2 as google_dot_protobuf_dot_any__pb2

from google.protobuf.empty_pb2 import *
from google.protobuf.any_pb2 import *

DESCRIPTOR = _descriptor.FileDescriptor(
  name='algorithm_rpc.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x13\x61lgorithm_rpc.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x19google/protobuf/any.proto\"\x90\x01\n\x0cImageRequest\x12\x0e\n\x04\x64\x61ta\x18\x01 \x01(\x0cH\x00\x12\r\n\x03url\x18\x02 \x01(\tH\x00\x12)\n\x06params\x18\x03 \x03(\x0b\x32\x19.ImageRequest.ParamsEntry\x1a-\n\x0bParamsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x42\x07\n\x05image\"\xaa\x01\n\nPdfRequest\x12\x0e\n\x04\x64\x61ta\x18\x01 \x01(\x0cH\x00\x12\r\n\x03url\x18\x02 \x01(\tH\x00\x12\x0c\n\x04type\x18\x03 \x01(\x05\x12\'\n\x06params\x18\x04 \x03(\x0b\x32\x17.PdfRequest.ParamsEntry\x12\x10\n\x08\x66ilename\x18\x05 \x01(\t\x1a-\n\x0bParamsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x42\x05\n\x03pdf\"\x92\x01\n\x08Interval\x12\x0b\n\x03min\x18\x01 \x01(\x05\x12\x0b\n\x03max\x18\x02 \x01(\x05\x12*\n\x0binclusivity\x18\x03 \x01(\x0e\x32\x15.Interval.Inclusivity\"@\n\x0bInclusivity\x12\n\n\x06\x43losed\x10\x00\x12\x0c\n\x08LeftOpen\x10\x01\x12\r\n\tRightOpen\x10\x02\x12\x08\n\x04Open\x10\x03\"@\n\x07Segment\x12\x1d\n\x08interval\x18\x01 \x01(\x0b\x32\t.IntervalH\x00\x12\x0e\n\x04page\x18\x02 \x01(\x05H\x00\x42\x06\n\x04Item\"G\n\x0fPdfSplitRequest\x12\x18\n\x03pdf\x18\x01 \x01(\x0b\x32\x0b.PdfRequest\x12\x1a\n\x08segments\x18\x02 \x03(\x0b\x32\x08.Segment\"4\n\x0fWatermarkParams\x12\x0f\n\x07\x65nabled\x18\x01 \x01(\x08\x12\x10\n\x08\x66\x65\x61tures\x18\x02 \x03(\x0c\"4\n\rCleanupParams\x12#\n\twatermark\x18\x01 \x01(\x0b\x32\x10.WatermarkParams\"M\n\x11PdfCleanupRequest\x12\x18\n\x03pdf\x18\x01 \x01(\x0b\x32\x0b.PdfRequest\x12\x1e\n\x06params\x18\x02 \x01(\x0b\x32\x0e.CleanupParams\"Q\n\nPdfContent\x12\r\n\x05index\x18\x01 \x01(\x05\x12\x19\n\x07segment\x18\x02 \x01(\x0b\x32\x08.Segment\x12\x0c\n\x04\x64\x61ta\x18\x03 \x01(\x0c\x12\x0b\n\x03\x65os\x18\x04 \x01(\x08\"z\n\x08RpcReply\x12\n\n\x02ok\x18\x01 \x01(\x08\x12\x0e\n\x06result\x18\x02 \x01(\x0c\x12\x13\n\x04type\x18\x03 \x01(\x0e\x32\x05.Type\x12\x0c\n\x04\x63ode\x18\x04 \x01(\x05\x12\x0b\n\x03msg\x18\x05 \x01(\t\x12\"\n\x04\x64\x61ta\x18\x06 \x01(\x0b\x32\x14.google.protobuf.Any\"\x1e\n\tPingReply\x12\x11\n\ttimestamp\x18\x01 \x01(\x03\"\xce\x01\n\x0cVersionReply\x12\x0f\n\x07version\x18\x01 \x01(\t\x12\x15\n\rchart_version\x18\x02 \x01(\x05\x12\x15\n\rtable_version\x18\x03 \x01(\x05\x12\x14\n\x0ctext_version\x18\x04 \x01(\x05\x12\x1c\n\x14\x62itmap_chart_version\x18\x05 \x01(\x05\x12\x1c\n\x14\x62itmap_table_version\x18\x06 \x01(\x05\x12\x18\n\x10\x63lassify_version\x18\x07 \x01(\x05\x12\x13\n\x0bocr_version\x18\x08 \x01(\x05\"C\n\tRpcStatus\x12\x0f\n\x07success\x18\x01 \x01(\x08\x12\x12\n\nerror_code\x18\x02 \x01(\x05\x12\x11\n\terror_msg\x18\x03 \x01(\t\"\xa0\x01\n\nOcrRequest\x12\x0e\n\x04\x64\x61ta\x18\x01 \x01(\x0cH\x00\x12\r\n\x03url\x18\x02 \x01(\tH\x00\x12\'\n\x06params\x18\x03 \x03(\x0b\x32\x17.OcrRequest.ParamsEntry\x12\x12\n\nimage_name\x18\x04 \x01(\t\x1a-\n\x0bParamsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x42\x07\n\x05image\".\n\x0f\x42\x61tchOcrRequest\x12\x1b\n\x06images\x18\x01 \x03(\x0b\x32\x0b.OcrRequest\"6\n\tTextReply\x12\x1a\n\x06status\x18\x01 \x01(\x0b\x32\n.RpcStatus\x12\r\n\x05texts\x18\x02 \x03(\t\"X\n\x03\x42ox\x12\x10\n\x08\x63\x65nter_x\x18\x01 \x01(\x05\x12\x10\n\x08\x63\x65nter_y\x18\x02 \x01(\x05\x12\r\n\x05width\x18\x03 \x01(\x05\x12\x0e\n\x06height\x18\x04 \x01(\x05\x12\x0e\n\x06rotate\x18\x05 \x01(\x05\"\xa8\x01\n\x07\x45lement\x12\"\n\x04type\x18\x01 \x01(\x0e\x32\x14.Element.ElementType\x12\x12\n\x04\x62\x62ox\x18\x02 \x01(\x0b\x32\x04.Box\x12\x0c\n\x04text\x18\x03 \x01(\t\"W\n\x0b\x45lementType\x12\x0b\n\x07UNKNOWN\x10\x00\x12\x08\n\x04TEXT\x10\x01\x12\x0f\n\x0bLEGEND_TEXT\x10\x02\x12\n\n\x06LEGEND\x10\x03\x12\t\n\x05HAXIS\x10\x04\x12\t\n\x05VAXIS\x10\x05\"F\n\x0c\x45lementReply\x12\x1a\n\x06status\x18\x01 \x01(\x0b\x32\n.RpcStatus\x12\x1a\n\x08\x65lements\x18\x02 \x03(\x0b\x32\x08.Element*\xa0\x01\n\x04Type\x12\x08\n\x04NONE\x10\x00\x12\x08\n\x04TEXT\x10\x01\x12\t\n\x05\x43HART\x10\x02\x12\t\n\x05TABLE\x10\x04\x12\x0b\n\x07\x44\x45\x46\x41ULT\x10\x07\x12\x10\n\x0c\x42ITMAP_CHART\x10\x08\x12\x10\n\x0c\x42ITMAP_TABLE\x10\x10\x12\x12\n\x0e\x42ITMAP_DEFAULT\x10\x18\x12\x07\n\x03\x41LL\x10\x1f\x12\x0e\n\x06\x42INARY\x10\x80\x80\x80\x80\x02\x12\x10\n\x08SEE_DATA\x10\x80\x80\x80\x80\x04\x32\xf5\x04\n\x10\x41lgorithmService\x12,\n\x04Ping\x12\x16.google.protobuf.Empty\x1a\n.PingReply\"\x00\x12\x35\n\nGetVersion\x12\x16.google.protobuf.Empty\x1a\r.VersionReply\"\x00\x12+\n\rImageClassify\x12\r.ImageRequest\x1a\t.RpcReply\"\x00\x12-\n\x0fImagePasreTable\x12\r.ImageRequest\x1a\t.RpcReply\"\x00\x12-\n\x0fImageParseChart\x12\r.ImageRequest\x1a\t.RpcReply\"\x00\x12\x30\n\x12ImageClassifyParse\x12\r.ImageRequest\x1a\t.RpcReply\"\x00\x12.\n\x10PdfParseSteaming\x12\x0b.PdfRequest\x1a\t.RpcReply\"\x00\x30\x01\x12$\n\x08PdfParse\x12\x0b.PdfRequest\x1a\t.RpcReply\"\x00\x12+\n\x08PdfSplit\x12\x10.PdfSplitRequest\x1a\t.RpcReply\"\x00\x30\x01\x12/\n\nPdfCleanup\x12\x12.PdfCleanupRequest\x1a\t.RpcReply\"\x00\x30\x01\x12-\n\rdetectElement\x12\x0b.OcrRequest\x1a\r.ElementReply\"\x00\x12(\n\x0bpredictText\x12\x0b.OcrRequest\x1a\n.TextReply\"\x00\x12\x32\n\x10\x62\x61tchPredictText\x12\x10.BatchOcrRequest\x1a\n.TextReply\"\x00\x42\x1a\n\x18\x63om.abcft.algorithm.grpcP\x00P\x01\x62\x06proto3')
  ,
  dependencies=[google_dot_protobuf_dot_empty__pb2.DESCRIPTOR,google_dot_protobuf_dot_any__pb2.DESCRIPTOR,],
  public_dependencies=[google_dot_protobuf_dot_empty__pb2.DESCRIPTOR,google_dot_protobuf_dot_any__pb2.DESCRIPTOR,])

_TYPE = _descriptor.EnumDescriptor(
  name='Type',
  full_name='Type',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='NONE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TEXT', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CHART', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TABLE', index=3, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DEFAULT', index=4, number=7,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BITMAP_CHART', index=5, number=8,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BITMAP_TABLE', index=6, number=16,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BITMAP_DEFAULT', index=7, number=24,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ALL', index=8, number=31,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BINARY', index=9, number=536870912,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEE_DATA', index=10, number=1073741824,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1992,
  serialized_end=2152,
)
_sym_db.RegisterEnumDescriptor(_TYPE)

Type = enum_type_wrapper.EnumTypeWrapper(_TYPE)
NONE = 0
TEXT = 1
CHART = 2
TABLE = 4
DEFAULT = 7
BITMAP_CHART = 8
BITMAP_TABLE = 16
BITMAP_DEFAULT = 24
ALL = 31
BINARY = 536870912
SEE_DATA = 1073741824


_INTERVAL_INCLUSIVITY = _descriptor.EnumDescriptor(
  name='Inclusivity',
  full_name='Interval.Inclusivity',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='Closed', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='LeftOpen', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='RightOpen', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='Open', index=3, number=3,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=482,
  serialized_end=546,
)
_sym_db.RegisterEnumDescriptor(_INTERVAL_INCLUSIVITY)

_ELEMENT_ELEMENTTYPE = _descriptor.EnumDescriptor(
  name='ElementType',
  full_name='Element.ElementType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='UNKNOWN', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TEXT', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='LEGEND_TEXT', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='LEGEND', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HAXIS', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VAXIS', index=5, number=5,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1830,
  serialized_end=1917,
)
_sym_db.RegisterEnumDescriptor(_ELEMENT_ELEMENTTYPE)


_IMAGEREQUEST_PARAMSENTRY = _descriptor.Descriptor(
  name='ParamsEntry',
  full_name='ImageRequest.ParamsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='ImageRequest.ParamsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='ImageRequest.ParamsEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=170,
  serialized_end=215,
)

_IMAGEREQUEST = _descriptor.Descriptor(
  name='ImageRequest',
  full_name='ImageRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='ImageRequest.data', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='url', full_name='ImageRequest.url', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='params', full_name='ImageRequest.params', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_IMAGEREQUEST_PARAMSENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='image', full_name='ImageRequest.image',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=80,
  serialized_end=224,
)


_PDFREQUEST_PARAMSENTRY = _descriptor.Descriptor(
  name='ParamsEntry',
  full_name='PdfRequest.ParamsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='PdfRequest.ParamsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='PdfRequest.ParamsEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=170,
  serialized_end=215,
)

_PDFREQUEST = _descriptor.Descriptor(
  name='PdfRequest',
  full_name='PdfRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='PdfRequest.data', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='url', full_name='PdfRequest.url', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='type', full_name='PdfRequest.type', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='params', full_name='PdfRequest.params', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='filename', full_name='PdfRequest.filename', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_PDFREQUEST_PARAMSENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='pdf', full_name='PdfRequest.pdf',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=227,
  serialized_end=397,
)


_INTERVAL = _descriptor.Descriptor(
  name='Interval',
  full_name='Interval',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='min', full_name='Interval.min', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max', full_name='Interval.max', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='inclusivity', full_name='Interval.inclusivity', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _INTERVAL_INCLUSIVITY,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=400,
  serialized_end=546,
)


_SEGMENT = _descriptor.Descriptor(
  name='Segment',
  full_name='Segment',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='interval', full_name='Segment.interval', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='page', full_name='Segment.page', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='Item', full_name='Segment.Item',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=548,
  serialized_end=612,
)


_PDFSPLITREQUEST = _descriptor.Descriptor(
  name='PdfSplitRequest',
  full_name='PdfSplitRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pdf', full_name='PdfSplitRequest.pdf', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='segments', full_name='PdfSplitRequest.segments', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=614,
  serialized_end=685,
)


_WATERMARKPARAMS = _descriptor.Descriptor(
  name='WatermarkParams',
  full_name='WatermarkParams',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='enabled', full_name='WatermarkParams.enabled', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='features', full_name='WatermarkParams.features', index=1,
      number=2, type=12, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=687,
  serialized_end=739,
)


_CLEANUPPARAMS = _descriptor.Descriptor(
  name='CleanupParams',
  full_name='CleanupParams',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='watermark', full_name='CleanupParams.watermark', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=741,
  serialized_end=793,
)


_PDFCLEANUPREQUEST = _descriptor.Descriptor(
  name='PdfCleanupRequest',
  full_name='PdfCleanupRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pdf', full_name='PdfCleanupRequest.pdf', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='params', full_name='PdfCleanupRequest.params', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=795,
  serialized_end=872,
)


_PDFCONTENT = _descriptor.Descriptor(
  name='PdfContent',
  full_name='PdfContent',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='index', full_name='PdfContent.index', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='segment', full_name='PdfContent.segment', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data', full_name='PdfContent.data', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='eos', full_name='PdfContent.eos', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=874,
  serialized_end=955,
)


_RPCREPLY = _descriptor.Descriptor(
  name='RpcReply',
  full_name='RpcReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ok', full_name='RpcReply.ok', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='result', full_name='RpcReply.result', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='type', full_name='RpcReply.type', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='code', full_name='RpcReply.code', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='msg', full_name='RpcReply.msg', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data', full_name='RpcReply.data', index=5,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=957,
  serialized_end=1079,
)


_PINGREPLY = _descriptor.Descriptor(
  name='PingReply',
  full_name='PingReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='timestamp', full_name='PingReply.timestamp', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1081,
  serialized_end=1111,
)


_VERSIONREPLY = _descriptor.Descriptor(
  name='VersionReply',
  full_name='VersionReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='version', full_name='VersionReply.version', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='chart_version', full_name='VersionReply.chart_version', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='table_version', full_name='VersionReply.table_version', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='text_version', full_name='VersionReply.text_version', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bitmap_chart_version', full_name='VersionReply.bitmap_chart_version', index=4,
      number=5, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bitmap_table_version', full_name='VersionReply.bitmap_table_version', index=5,
      number=6, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='classify_version', full_name='VersionReply.classify_version', index=6,
      number=7, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ocr_version', full_name='VersionReply.ocr_version', index=7,
      number=8, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1114,
  serialized_end=1320,
)


_RPCSTATUS = _descriptor.Descriptor(
  name='RpcStatus',
  full_name='RpcStatus',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='success', full_name='RpcStatus.success', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='error_code', full_name='RpcStatus.error_code', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='error_msg', full_name='RpcStatus.error_msg', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1322,
  serialized_end=1389,
)


_OCRREQUEST_PARAMSENTRY = _descriptor.Descriptor(
  name='ParamsEntry',
  full_name='OcrRequest.ParamsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='OcrRequest.ParamsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='OcrRequest.ParamsEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=170,
  serialized_end=215,
)

_OCRREQUEST = _descriptor.Descriptor(
  name='OcrRequest',
  full_name='OcrRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='OcrRequest.data', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='url', full_name='OcrRequest.url', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='params', full_name='OcrRequest.params', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='image_name', full_name='OcrRequest.image_name', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_OCRREQUEST_PARAMSENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='image', full_name='OcrRequest.image',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=1392,
  serialized_end=1552,
)


_BATCHOCRREQUEST = _descriptor.Descriptor(
  name='BatchOcrRequest',
  full_name='BatchOcrRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='images', full_name='BatchOcrRequest.images', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1554,
  serialized_end=1600,
)


_TEXTREPLY = _descriptor.Descriptor(
  name='TextReply',
  full_name='TextReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='TextReply.status', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='texts', full_name='TextReply.texts', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1602,
  serialized_end=1656,
)


_BOX = _descriptor.Descriptor(
  name='Box',
  full_name='Box',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='center_x', full_name='Box.center_x', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='center_y', full_name='Box.center_y', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='width', full_name='Box.width', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='height', full_name='Box.height', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='rotate', full_name='Box.rotate', index=4,
      number=5, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1658,
  serialized_end=1746,
)


_ELEMENT = _descriptor.Descriptor(
  name='Element',
  full_name='Element',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='type', full_name='Element.type', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bbox', full_name='Element.bbox', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='text', full_name='Element.text', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _ELEMENT_ELEMENTTYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1749,
  serialized_end=1917,
)


_ELEMENTREPLY = _descriptor.Descriptor(
  name='ElementReply',
  full_name='ElementReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='ElementReply.status', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='elements', full_name='ElementReply.elements', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1919,
  serialized_end=1989,
)

_IMAGEREQUEST_PARAMSENTRY.containing_type = _IMAGEREQUEST
_IMAGEREQUEST.fields_by_name['params'].message_type = _IMAGEREQUEST_PARAMSENTRY
_IMAGEREQUEST.oneofs_by_name['image'].fields.append(
  _IMAGEREQUEST.fields_by_name['data'])
_IMAGEREQUEST.fields_by_name['data'].containing_oneof = _IMAGEREQUEST.oneofs_by_name['image']
_IMAGEREQUEST.oneofs_by_name['image'].fields.append(
  _IMAGEREQUEST.fields_by_name['url'])
_IMAGEREQUEST.fields_by_name['url'].containing_oneof = _IMAGEREQUEST.oneofs_by_name['image']
_PDFREQUEST_PARAMSENTRY.containing_type = _PDFREQUEST
_PDFREQUEST.fields_by_name['params'].message_type = _PDFREQUEST_PARAMSENTRY
_PDFREQUEST.oneofs_by_name['pdf'].fields.append(
  _PDFREQUEST.fields_by_name['data'])
_PDFREQUEST.fields_by_name['data'].containing_oneof = _PDFREQUEST.oneofs_by_name['pdf']
_PDFREQUEST.oneofs_by_name['pdf'].fields.append(
  _PDFREQUEST.fields_by_name['url'])
_PDFREQUEST.fields_by_name['url'].containing_oneof = _PDFREQUEST.oneofs_by_name['pdf']
_INTERVAL.fields_by_name['inclusivity'].enum_type = _INTERVAL_INCLUSIVITY
_INTERVAL_INCLUSIVITY.containing_type = _INTERVAL
_SEGMENT.fields_by_name['interval'].message_type = _INTERVAL
_SEGMENT.oneofs_by_name['Item'].fields.append(
  _SEGMENT.fields_by_name['interval'])
_SEGMENT.fields_by_name['interval'].containing_oneof = _SEGMENT.oneofs_by_name['Item']
_SEGMENT.oneofs_by_name['Item'].fields.append(
  _SEGMENT.fields_by_name['page'])
_SEGMENT.fields_by_name['page'].containing_oneof = _SEGMENT.oneofs_by_name['Item']
_PDFSPLITREQUEST.fields_by_name['pdf'].message_type = _PDFREQUEST
_PDFSPLITREQUEST.fields_by_name['segments'].message_type = _SEGMENT
_CLEANUPPARAMS.fields_by_name['watermark'].message_type = _WATERMARKPARAMS
_PDFCLEANUPREQUEST.fields_by_name['pdf'].message_type = _PDFREQUEST
_PDFCLEANUPREQUEST.fields_by_name['params'].message_type = _CLEANUPPARAMS
_PDFCONTENT.fields_by_name['segment'].message_type = _SEGMENT
_RPCREPLY.fields_by_name['type'].enum_type = _TYPE
_RPCREPLY.fields_by_name['data'].message_type = google_dot_protobuf_dot_any__pb2._ANY
_OCRREQUEST_PARAMSENTRY.containing_type = _OCRREQUEST
_OCRREQUEST.fields_by_name['params'].message_type = _OCRREQUEST_PARAMSENTRY
_OCRREQUEST.oneofs_by_name['image'].fields.append(
  _OCRREQUEST.fields_by_name['data'])
_OCRREQUEST.fields_by_name['data'].containing_oneof = _OCRREQUEST.oneofs_by_name['image']
_OCRREQUEST.oneofs_by_name['image'].fields.append(
  _OCRREQUEST.fields_by_name['url'])
_OCRREQUEST.fields_by_name['url'].containing_oneof = _OCRREQUEST.oneofs_by_name['image']
_BATCHOCRREQUEST.fields_by_name['images'].message_type = _OCRREQUEST
_TEXTREPLY.fields_by_name['status'].message_type = _RPCSTATUS
_ELEMENT.fields_by_name['type'].enum_type = _ELEMENT_ELEMENTTYPE
_ELEMENT.fields_by_name['bbox'].message_type = _BOX
_ELEMENT_ELEMENTTYPE.containing_type = _ELEMENT
_ELEMENTREPLY.fields_by_name['status'].message_type = _RPCSTATUS
_ELEMENTREPLY.fields_by_name['elements'].message_type = _ELEMENT
DESCRIPTOR.message_types_by_name['ImageRequest'] = _IMAGEREQUEST
DESCRIPTOR.message_types_by_name['PdfRequest'] = _PDFREQUEST
DESCRIPTOR.message_types_by_name['Interval'] = _INTERVAL
DESCRIPTOR.message_types_by_name['Segment'] = _SEGMENT
DESCRIPTOR.message_types_by_name['PdfSplitRequest'] = _PDFSPLITREQUEST
DESCRIPTOR.message_types_by_name['WatermarkParams'] = _WATERMARKPARAMS
DESCRIPTOR.message_types_by_name['CleanupParams'] = _CLEANUPPARAMS
DESCRIPTOR.message_types_by_name['PdfCleanupRequest'] = _PDFCLEANUPREQUEST
DESCRIPTOR.message_types_by_name['PdfContent'] = _PDFCONTENT
DESCRIPTOR.message_types_by_name['RpcReply'] = _RPCREPLY
DESCRIPTOR.message_types_by_name['PingReply'] = _PINGREPLY
DESCRIPTOR.message_types_by_name['VersionReply'] = _VERSIONREPLY
DESCRIPTOR.message_types_by_name['RpcStatus'] = _RPCSTATUS
DESCRIPTOR.message_types_by_name['OcrRequest'] = _OCRREQUEST
DESCRIPTOR.message_types_by_name['BatchOcrRequest'] = _BATCHOCRREQUEST
DESCRIPTOR.message_types_by_name['TextReply'] = _TEXTREPLY
DESCRIPTOR.message_types_by_name['Box'] = _BOX
DESCRIPTOR.message_types_by_name['Element'] = _ELEMENT
DESCRIPTOR.message_types_by_name['ElementReply'] = _ELEMENTREPLY
DESCRIPTOR.enum_types_by_name['Type'] = _TYPE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

ImageRequest = _reflection.GeneratedProtocolMessageType('ImageRequest', (_message.Message,), dict(

  ParamsEntry = _reflection.GeneratedProtocolMessageType('ParamsEntry', (_message.Message,), dict(
    DESCRIPTOR = _IMAGEREQUEST_PARAMSENTRY,
    __module__ = 'algorithm_rpc_pb2'
    # @@protoc_insertion_point(class_scope:ImageRequest.ParamsEntry)
    ))
  ,
  DESCRIPTOR = _IMAGEREQUEST,
  __module__ = 'algorithm_rpc_pb2'
  # @@protoc_insertion_point(class_scope:ImageRequest)
  ))
_sym_db.RegisterMessage(ImageRequest)
_sym_db.RegisterMessage(ImageRequest.ParamsEntry)

PdfRequest = _reflection.GeneratedProtocolMessageType('PdfRequest', (_message.Message,), dict(

  ParamsEntry = _reflection.GeneratedProtocolMessageType('ParamsEntry', (_message.Message,), dict(
    DESCRIPTOR = _PDFREQUEST_PARAMSENTRY,
    __module__ = 'algorithm_rpc_pb2'
    # @@protoc_insertion_point(class_scope:PdfRequest.ParamsEntry)
    ))
  ,
  DESCRIPTOR = _PDFREQUEST,
  __module__ = 'algorithm_rpc_pb2'
  # @@protoc_insertion_point(class_scope:PdfRequest)
  ))
_sym_db.RegisterMessage(PdfRequest)
_sym_db.RegisterMessage(PdfRequest.ParamsEntry)

Interval = _reflection.GeneratedProtocolMessageType('Interval', (_message.Message,), dict(
  DESCRIPTOR = _INTERVAL,
  __module__ = 'algorithm_rpc_pb2'
  # @@protoc_insertion_point(class_scope:Interval)
  ))
_sym_db.RegisterMessage(Interval)

Segment = _reflection.GeneratedProtocolMessageType('Segment', (_message.Message,), dict(
  DESCRIPTOR = _SEGMENT,
  __module__ = 'algorithm_rpc_pb2'
  # @@protoc_insertion_point(class_scope:Segment)
  ))
_sym_db.RegisterMessage(Segment)

PdfSplitRequest = _reflection.GeneratedProtocolMessageType('PdfSplitRequest', (_message.Message,), dict(
  DESCRIPTOR = _PDFSPLITREQUEST,
  __module__ = 'algorithm_rpc_pb2'
  # @@protoc_insertion_point(class_scope:PdfSplitRequest)
  ))
_sym_db.RegisterMessage(PdfSplitRequest)

WatermarkParams = _reflection.GeneratedProtocolMessageType('WatermarkParams', (_message.Message,), dict(
  DESCRIPTOR = _WATERMARKPARAMS,
  __module__ = 'algorithm_rpc_pb2'
  # @@protoc_insertion_point(class_scope:WatermarkParams)
  ))
_sym_db.RegisterMessage(WatermarkParams)

CleanupParams = _reflection.GeneratedProtocolMessageType('CleanupParams', (_message.Message,), dict(
  DESCRIPTOR = _CLEANUPPARAMS,
  __module__ = 'algorithm_rpc_pb2'
  # @@protoc_insertion_point(class_scope:CleanupParams)
  ))
_sym_db.RegisterMessage(CleanupParams)

PdfCleanupRequest = _reflection.GeneratedProtocolMessageType('PdfCleanupRequest', (_message.Message,), dict(
  DESCRIPTOR = _PDFCLEANUPREQUEST,
  __module__ = 'algorithm_rpc_pb2'
  # @@protoc_insertion_point(class_scope:PdfCleanupRequest)
  ))
_sym_db.RegisterMessage(PdfCleanupRequest)

PdfContent = _reflection.GeneratedProtocolMessageType('PdfContent', (_message.Message,), dict(
  DESCRIPTOR = _PDFCONTENT,
  __module__ = 'algorithm_rpc_pb2'
  # @@protoc_insertion_point(class_scope:PdfContent)
  ))
_sym_db.RegisterMessage(PdfContent)

RpcReply = _reflection.GeneratedProtocolMessageType('RpcReply', (_message.Message,), dict(
  DESCRIPTOR = _RPCREPLY,
  __module__ = 'algorithm_rpc_pb2'
  # @@protoc_insertion_point(class_scope:RpcReply)
  ))
_sym_db.RegisterMessage(RpcReply)

PingReply = _reflection.GeneratedProtocolMessageType('PingReply', (_message.Message,), dict(
  DESCRIPTOR = _PINGREPLY,
  __module__ = 'algorithm_rpc_pb2'
  # @@protoc_insertion_point(class_scope:PingReply)
  ))
_sym_db.RegisterMessage(PingReply)

VersionReply = _reflection.GeneratedProtocolMessageType('VersionReply', (_message.Message,), dict(
  DESCRIPTOR = _VERSIONREPLY,
  __module__ = 'algorithm_rpc_pb2'
  # @@protoc_insertion_point(class_scope:VersionReply)
  ))
_sym_db.RegisterMessage(VersionReply)

RpcStatus = _reflection.GeneratedProtocolMessageType('RpcStatus', (_message.Message,), dict(
  DESCRIPTOR = _RPCSTATUS,
  __module__ = 'algorithm_rpc_pb2'
  # @@protoc_insertion_point(class_scope:RpcStatus)
  ))
_sym_db.RegisterMessage(RpcStatus)

OcrRequest = _reflection.GeneratedProtocolMessageType('OcrRequest', (_message.Message,), dict(

  ParamsEntry = _reflection.GeneratedProtocolMessageType('ParamsEntry', (_message.Message,), dict(
    DESCRIPTOR = _OCRREQUEST_PARAMSENTRY,
    __module__ = 'algorithm_rpc_pb2'
    # @@protoc_insertion_point(class_scope:OcrRequest.ParamsEntry)
    ))
  ,
  DESCRIPTOR = _OCRREQUEST,
  __module__ = 'algorithm_rpc_pb2'
  # @@protoc_insertion_point(class_scope:OcrRequest)
  ))
_sym_db.RegisterMessage(OcrRequest)
_sym_db.RegisterMessage(OcrRequest.ParamsEntry)

BatchOcrRequest = _reflection.GeneratedProtocolMessageType('BatchOcrRequest', (_message.Message,), dict(
  DESCRIPTOR = _BATCHOCRREQUEST,
  __module__ = 'algorithm_rpc_pb2'
  # @@protoc_insertion_point(class_scope:BatchOcrRequest)
  ))
_sym_db.RegisterMessage(BatchOcrRequest)

TextReply = _reflection.GeneratedProtocolMessageType('TextReply', (_message.Message,), dict(
  DESCRIPTOR = _TEXTREPLY,
  __module__ = 'algorithm_rpc_pb2'
  # @@protoc_insertion_point(class_scope:TextReply)
  ))
_sym_db.RegisterMessage(TextReply)

Box = _reflection.GeneratedProtocolMessageType('Box', (_message.Message,), dict(
  DESCRIPTOR = _BOX,
  __module__ = 'algorithm_rpc_pb2'
  # @@protoc_insertion_point(class_scope:Box)
  ))
_sym_db.RegisterMessage(Box)

Element = _reflection.GeneratedProtocolMessageType('Element', (_message.Message,), dict(
  DESCRIPTOR = _ELEMENT,
  __module__ = 'algorithm_rpc_pb2'
  # @@protoc_insertion_point(class_scope:Element)
  ))
_sym_db.RegisterMessage(Element)

ElementReply = _reflection.GeneratedProtocolMessageType('ElementReply', (_message.Message,), dict(
  DESCRIPTOR = _ELEMENTREPLY,
  __module__ = 'algorithm_rpc_pb2'
  # @@protoc_insertion_point(class_scope:ElementReply)
  ))
_sym_db.RegisterMessage(ElementReply)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\030com.abcft.algorithm.grpc'))
_IMAGEREQUEST_PARAMSENTRY.has_options = True
_IMAGEREQUEST_PARAMSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_PDFREQUEST_PARAMSENTRY.has_options = True
_PDFREQUEST_PARAMSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_OCRREQUEST_PARAMSENTRY.has_options = True
_OCRREQUEST_PARAMSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class AlgorithmServiceStub(object):
    """Algorithm RPC service
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Ping = channel.unary_unary(
          '/AlgorithmService/Ping',
          request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
          response_deserializer=PingReply.FromString,
          )
      self.GetVersion = channel.unary_unary(
          '/AlgorithmService/GetVersion',
          request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
          response_deserializer=VersionReply.FromString,
          )
      self.ImageClassify = channel.unary_unary(
          '/AlgorithmService/ImageClassify',
          request_serializer=ImageRequest.SerializeToString,
          response_deserializer=RpcReply.FromString,
          )
      self.ImagePasreTable = channel.unary_unary(
          '/AlgorithmService/ImagePasreTable',
          request_serializer=ImageRequest.SerializeToString,
          response_deserializer=RpcReply.FromString,
          )
      self.ImageParseChart = channel.unary_unary(
          '/AlgorithmService/ImageParseChart',
          request_serializer=ImageRequest.SerializeToString,
          response_deserializer=RpcReply.FromString,
          )
      self.ImageClassifyParse = channel.unary_unary(
          '/AlgorithmService/ImageClassifyParse',
          request_serializer=ImageRequest.SerializeToString,
          response_deserializer=RpcReply.FromString,
          )
      self.PdfParseSteaming = channel.unary_stream(
          '/AlgorithmService/PdfParseSteaming',
          request_serializer=PdfRequest.SerializeToString,
          response_deserializer=RpcReply.FromString,
          )
      self.PdfParse = channel.unary_unary(
          '/AlgorithmService/PdfParse',
          request_serializer=PdfRequest.SerializeToString,
          response_deserializer=RpcReply.FromString,
          )
      self.PdfSplit = channel.unary_stream(
          '/AlgorithmService/PdfSplit',
          request_serializer=PdfSplitRequest.SerializeToString,
          response_deserializer=RpcReply.FromString,
          )
      self.PdfCleanup = channel.unary_stream(
          '/AlgorithmService/PdfCleanup',
          request_serializer=PdfCleanupRequest.SerializeToString,
          response_deserializer=RpcReply.FromString,
          )
      self.detectElement = channel.unary_unary(
          '/AlgorithmService/detectElement',
          request_serializer=OcrRequest.SerializeToString,
          response_deserializer=ElementReply.FromString,
          )
      self.predictText = channel.unary_unary(
          '/AlgorithmService/predictText',
          request_serializer=OcrRequest.SerializeToString,
          response_deserializer=TextReply.FromString,
          )
      self.batchPredictText = channel.unary_unary(
          '/AlgorithmService/batchPredictText',
          request_serializer=BatchOcrRequest.SerializeToString,
          response_deserializer=TextReply.FromString,
          )


  class AlgorithmServiceServicer(object):
    """Algorithm RPC service
    """

    def Ping(self, request, context):
      """Ping the server
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetVersion(self, request, context):
      """Retrieve the version of the RPC service and algorithms
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ImageClassify(self, request, context):
      """Classify specified image
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ImagePasreTable(self, request, context):
      """Parse and extract table from specified image
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ImageParseChart(self, request, context):
      """Parse and extract chart from specified image
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ImageClassifyParse(self, request, context):
      """Classify and parse specified image
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def PdfParseSteaming(self, request, context):
      """Parse specified PDF in streaming mode
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def PdfParse(self, request, context):
      """Parse specified PDF in sychronous mode
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def PdfSplit(self, request, context):
      """Split specified PDF into multiple ones
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def PdfCleanup(self, request, context):
      """Split specified PDF into multiple ones
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def detectElement(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def predictText(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def batchPredictText(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_AlgorithmServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Ping': grpc.unary_unary_rpc_method_handler(
            servicer.Ping,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=PingReply.SerializeToString,
        ),
        'GetVersion': grpc.unary_unary_rpc_method_handler(
            servicer.GetVersion,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=VersionReply.SerializeToString,
        ),
        'ImageClassify': grpc.unary_unary_rpc_method_handler(
            servicer.ImageClassify,
            request_deserializer=ImageRequest.FromString,
            response_serializer=RpcReply.SerializeToString,
        ),
        'ImagePasreTable': grpc.unary_unary_rpc_method_handler(
            servicer.ImagePasreTable,
            request_deserializer=ImageRequest.FromString,
            response_serializer=RpcReply.SerializeToString,
        ),
        'ImageParseChart': grpc.unary_unary_rpc_method_handler(
            servicer.ImageParseChart,
            request_deserializer=ImageRequest.FromString,
            response_serializer=RpcReply.SerializeToString,
        ),
        'ImageClassifyParse': grpc.unary_unary_rpc_method_handler(
            servicer.ImageClassifyParse,
            request_deserializer=ImageRequest.FromString,
            response_serializer=RpcReply.SerializeToString,
        ),
        'PdfParseSteaming': grpc.unary_stream_rpc_method_handler(
            servicer.PdfParseSteaming,
            request_deserializer=PdfRequest.FromString,
            response_serializer=RpcReply.SerializeToString,
        ),
        'PdfParse': grpc.unary_unary_rpc_method_handler(
            servicer.PdfParse,
            request_deserializer=PdfRequest.FromString,
            response_serializer=RpcReply.SerializeToString,
        ),
        'PdfSplit': grpc.unary_stream_rpc_method_handler(
            servicer.PdfSplit,
            request_deserializer=PdfSplitRequest.FromString,
            response_serializer=RpcReply.SerializeToString,
        ),
        'PdfCleanup': grpc.unary_stream_rpc_method_handler(
            servicer.PdfCleanup,
            request_deserializer=PdfCleanupRequest.FromString,
            response_serializer=RpcReply.SerializeToString,
        ),
        'detectElement': grpc.unary_unary_rpc_method_handler(
            servicer.detectElement,
            request_deserializer=OcrRequest.FromString,
            response_serializer=ElementReply.SerializeToString,
        ),
        'predictText': grpc.unary_unary_rpc_method_handler(
            servicer.predictText,
            request_deserializer=OcrRequest.FromString,
            response_serializer=TextReply.SerializeToString,
        ),
        'batchPredictText': grpc.unary_unary_rpc_method_handler(
            servicer.batchPredictText,
            request_deserializer=BatchOcrRequest.FromString,
            response_serializer=TextReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'AlgorithmService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaAlgorithmServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Algorithm RPC service
    """
    def Ping(self, request, context):
      """Ping the server
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetVersion(self, request, context):
      """Retrieve the version of the RPC service and algorithms
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ImageClassify(self, request, context):
      """Classify specified image
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ImagePasreTable(self, request, context):
      """Parse and extract table from specified image
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ImageParseChart(self, request, context):
      """Parse and extract chart from specified image
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ImageClassifyParse(self, request, context):
      """Classify and parse specified image
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def PdfParseSteaming(self, request, context):
      """Parse specified PDF in streaming mode
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def PdfParse(self, request, context):
      """Parse specified PDF in sychronous mode
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def PdfSplit(self, request, context):
      """Split specified PDF into multiple ones
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def PdfCleanup(self, request, context):
      """Split specified PDF into multiple ones
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def detectElement(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def predictText(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def batchPredictText(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaAlgorithmServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Algorithm RPC service
    """
    def Ping(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Ping the server
      """
      raise NotImplementedError()
    Ping.future = None
    def GetVersion(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Retrieve the version of the RPC service and algorithms
      """
      raise NotImplementedError()
    GetVersion.future = None
    def ImageClassify(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Classify specified image
      """
      raise NotImplementedError()
    ImageClassify.future = None
    def ImagePasreTable(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Parse and extract table from specified image
      """
      raise NotImplementedError()
    ImagePasreTable.future = None
    def ImageParseChart(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Parse and extract chart from specified image
      """
      raise NotImplementedError()
    ImageParseChart.future = None
    def ImageClassifyParse(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Classify and parse specified image
      """
      raise NotImplementedError()
    ImageClassifyParse.future = None
    def PdfParseSteaming(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Parse specified PDF in streaming mode
      """
      raise NotImplementedError()
    def PdfParse(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Parse specified PDF in sychronous mode
      """
      raise NotImplementedError()
    PdfParse.future = None
    def PdfSplit(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Split specified PDF into multiple ones
      """
      raise NotImplementedError()
    def PdfCleanup(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Split specified PDF into multiple ones
      """
      raise NotImplementedError()
    def detectElement(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    detectElement.future = None
    def predictText(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    predictText.future = None
    def batchPredictText(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    batchPredictText.future = None


  def beta_create_AlgorithmService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('AlgorithmService', 'GetVersion'): google_dot_protobuf_dot_empty__pb2.Empty.FromString,
      ('AlgorithmService', 'ImageClassify'): ImageRequest.FromString,
      ('AlgorithmService', 'ImageClassifyParse'): ImageRequest.FromString,
      ('AlgorithmService', 'ImageParseChart'): ImageRequest.FromString,
      ('AlgorithmService', 'ImagePasreTable'): ImageRequest.FromString,
      ('AlgorithmService', 'PdfCleanup'): PdfCleanupRequest.FromString,
      ('AlgorithmService', 'PdfParse'): PdfRequest.FromString,
      ('AlgorithmService', 'PdfParseSteaming'): PdfRequest.FromString,
      ('AlgorithmService', 'PdfSplit'): PdfSplitRequest.FromString,
      ('AlgorithmService', 'Ping'): google_dot_protobuf_dot_empty__pb2.Empty.FromString,
      ('AlgorithmService', 'batchPredictText'): BatchOcrRequest.FromString,
      ('AlgorithmService', 'detectElement'): OcrRequest.FromString,
      ('AlgorithmService', 'predictText'): OcrRequest.FromString,
    }
    response_serializers = {
      ('AlgorithmService', 'GetVersion'): VersionReply.SerializeToString,
      ('AlgorithmService', 'ImageClassify'): RpcReply.SerializeToString,
      ('AlgorithmService', 'ImageClassifyParse'): RpcReply.SerializeToString,
      ('AlgorithmService', 'ImageParseChart'): RpcReply.SerializeToString,
      ('AlgorithmService', 'ImagePasreTable'): RpcReply.SerializeToString,
      ('AlgorithmService', 'PdfCleanup'): RpcReply.SerializeToString,
      ('AlgorithmService', 'PdfParse'): RpcReply.SerializeToString,
      ('AlgorithmService', 'PdfParseSteaming'): RpcReply.SerializeToString,
      ('AlgorithmService', 'PdfSplit'): RpcReply.SerializeToString,
      ('AlgorithmService', 'Ping'): PingReply.SerializeToString,
      ('AlgorithmService', 'batchPredictText'): TextReply.SerializeToString,
      ('AlgorithmService', 'detectElement'): ElementReply.SerializeToString,
      ('AlgorithmService', 'predictText'): TextReply.SerializeToString,
    }
    method_implementations = {
      ('AlgorithmService', 'GetVersion'): face_utilities.unary_unary_inline(servicer.GetVersion),
      ('AlgorithmService', 'ImageClassify'): face_utilities.unary_unary_inline(servicer.ImageClassify),
      ('AlgorithmService', 'ImageClassifyParse'): face_utilities.unary_unary_inline(servicer.ImageClassifyParse),
      ('AlgorithmService', 'ImageParseChart'): face_utilities.unary_unary_inline(servicer.ImageParseChart),
      ('AlgorithmService', 'ImagePasreTable'): face_utilities.unary_unary_inline(servicer.ImagePasreTable),
      ('AlgorithmService', 'PdfCleanup'): face_utilities.unary_stream_inline(servicer.PdfCleanup),
      ('AlgorithmService', 'PdfParse'): face_utilities.unary_unary_inline(servicer.PdfParse),
      ('AlgorithmService', 'PdfParseSteaming'): face_utilities.unary_stream_inline(servicer.PdfParseSteaming),
      ('AlgorithmService', 'PdfSplit'): face_utilities.unary_stream_inline(servicer.PdfSplit),
      ('AlgorithmService', 'Ping'): face_utilities.unary_unary_inline(servicer.Ping),
      ('AlgorithmService', 'batchPredictText'): face_utilities.unary_unary_inline(servicer.batchPredictText),
      ('AlgorithmService', 'detectElement'): face_utilities.unary_unary_inline(servicer.detectElement),
      ('AlgorithmService', 'predictText'): face_utilities.unary_unary_inline(servicer.predictText),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_AlgorithmService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('AlgorithmService', 'GetVersion'): google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ('AlgorithmService', 'ImageClassify'): ImageRequest.SerializeToString,
      ('AlgorithmService', 'ImageClassifyParse'): ImageRequest.SerializeToString,
      ('AlgorithmService', 'ImageParseChart'): ImageRequest.SerializeToString,
      ('AlgorithmService', 'ImagePasreTable'): ImageRequest.SerializeToString,
      ('AlgorithmService', 'PdfCleanup'): PdfCleanupRequest.SerializeToString,
      ('AlgorithmService', 'PdfParse'): PdfRequest.SerializeToString,
      ('AlgorithmService', 'PdfParseSteaming'): PdfRequest.SerializeToString,
      ('AlgorithmService', 'PdfSplit'): PdfSplitRequest.SerializeToString,
      ('AlgorithmService', 'Ping'): google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ('AlgorithmService', 'batchPredictText'): BatchOcrRequest.SerializeToString,
      ('AlgorithmService', 'detectElement'): OcrRequest.SerializeToString,
      ('AlgorithmService', 'predictText'): OcrRequest.SerializeToString,
    }
    response_deserializers = {
      ('AlgorithmService', 'GetVersion'): VersionReply.FromString,
      ('AlgorithmService', 'ImageClassify'): RpcReply.FromString,
      ('AlgorithmService', 'ImageClassifyParse'): RpcReply.FromString,
      ('AlgorithmService', 'ImageParseChart'): RpcReply.FromString,
      ('AlgorithmService', 'ImagePasreTable'): RpcReply.FromString,
      ('AlgorithmService', 'PdfCleanup'): RpcReply.FromString,
      ('AlgorithmService', 'PdfParse'): RpcReply.FromString,
      ('AlgorithmService', 'PdfParseSteaming'): RpcReply.FromString,
      ('AlgorithmService', 'PdfSplit'): RpcReply.FromString,
      ('AlgorithmService', 'Ping'): PingReply.FromString,
      ('AlgorithmService', 'batchPredictText'): TextReply.FromString,
      ('AlgorithmService', 'detectElement'): ElementReply.FromString,
      ('AlgorithmService', 'predictText'): TextReply.FromString,
    }
    cardinalities = {
      'GetVersion': cardinality.Cardinality.UNARY_UNARY,
      'ImageClassify': cardinality.Cardinality.UNARY_UNARY,
      'ImageClassifyParse': cardinality.Cardinality.UNARY_UNARY,
      'ImageParseChart': cardinality.Cardinality.UNARY_UNARY,
      'ImagePasreTable': cardinality.Cardinality.UNARY_UNARY,
      'PdfCleanup': cardinality.Cardinality.UNARY_STREAM,
      'PdfParse': cardinality.Cardinality.UNARY_UNARY,
      'PdfParseSteaming': cardinality.Cardinality.UNARY_STREAM,
      'PdfSplit': cardinality.Cardinality.UNARY_STREAM,
      'Ping': cardinality.Cardinality.UNARY_UNARY,
      'batchPredictText': cardinality.Cardinality.UNARY_UNARY,
      'detectElement': cardinality.Cardinality.UNARY_UNARY,
      'predictText': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'AlgorithmService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
