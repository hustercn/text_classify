# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import algorithm_rpc_pb2 as algorithm__rpc__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class AlgorithmServiceStub(object):
  """Algorithm RPC service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Ping = channel.unary_unary(
        '/AlgorithmService/Ping',
        request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        response_deserializer=algorithm__rpc__pb2.PingReply.FromString,
        )
    self.GetVersion = channel.unary_unary(
        '/AlgorithmService/GetVersion',
        request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        response_deserializer=algorithm__rpc__pb2.VersionReply.FromString,
        )
    self.ImageClassify = channel.unary_unary(
        '/AlgorithmService/ImageClassify',
        request_serializer=algorithm__rpc__pb2.ImageRequest.SerializeToString,
        response_deserializer=algorithm__rpc__pb2.RpcReply.FromString,
        )
    self.ImagePasreTable = channel.unary_unary(
        '/AlgorithmService/ImagePasreTable',
        request_serializer=algorithm__rpc__pb2.ImageRequest.SerializeToString,
        response_deserializer=algorithm__rpc__pb2.RpcReply.FromString,
        )
    self.ImageParseChart = channel.unary_unary(
        '/AlgorithmService/ImageParseChart',
        request_serializer=algorithm__rpc__pb2.ImageRequest.SerializeToString,
        response_deserializer=algorithm__rpc__pb2.RpcReply.FromString,
        )
    self.ImageClassifyParse = channel.unary_unary(
        '/AlgorithmService/ImageClassifyParse',
        request_serializer=algorithm__rpc__pb2.ImageRequest.SerializeToString,
        response_deserializer=algorithm__rpc__pb2.RpcReply.FromString,
        )
    self.PdfParseSteaming = channel.unary_stream(
        '/AlgorithmService/PdfParseSteaming',
        request_serializer=algorithm__rpc__pb2.PdfRequest.SerializeToString,
        response_deserializer=algorithm__rpc__pb2.RpcReply.FromString,
        )
    self.PdfParse = channel.unary_unary(
        '/AlgorithmService/PdfParse',
        request_serializer=algorithm__rpc__pb2.PdfRequest.SerializeToString,
        response_deserializer=algorithm__rpc__pb2.RpcReply.FromString,
        )
    self.PdfSplit = channel.unary_stream(
        '/AlgorithmService/PdfSplit',
        request_serializer=algorithm__rpc__pb2.PdfSplitRequest.SerializeToString,
        response_deserializer=algorithm__rpc__pb2.RpcReply.FromString,
        )
    self.PdfCleanup = channel.unary_stream(
        '/AlgorithmService/PdfCleanup',
        request_serializer=algorithm__rpc__pb2.PdfCleanupRequest.SerializeToString,
        response_deserializer=algorithm__rpc__pb2.RpcReply.FromString,
        )
    self.detectElement = channel.unary_unary(
        '/AlgorithmService/detectElement',
        request_serializer=algorithm__rpc__pb2.OcrRequest.SerializeToString,
        response_deserializer=algorithm__rpc__pb2.ElementReply.FromString,
        )
    self.predictText = channel.unary_unary(
        '/AlgorithmService/predictText',
        request_serializer=algorithm__rpc__pb2.OcrRequest.SerializeToString,
        response_deserializer=algorithm__rpc__pb2.TextReply.FromString,
        )
    self.batchPredictText = channel.unary_unary(
        '/AlgorithmService/batchPredictText',
        request_serializer=algorithm__rpc__pb2.BatchOcrRequest.SerializeToString,
        response_deserializer=algorithm__rpc__pb2.TextReply.FromString,
        )


class AlgorithmServiceServicer(object):
  """Algorithm RPC service
  """

  def Ping(self, request, context):
    """Ping the server
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetVersion(self, request, context):
    """Retrieve the version of the RPC service and algorithms
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ImageClassify(self, request, context):
    """Classify specified image
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ImagePasreTable(self, request, context):
    """Parse and extract table from specified image
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ImageParseChart(self, request, context):
    """Parse and extract chart from specified image
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ImageClassifyParse(self, request, context):
    """Classify and parse specified image
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PdfParseSteaming(self, request, context):
    """Parse specified PDF in streaming mode
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PdfParse(self, request, context):
    """Parse specified PDF in sychronous mode
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PdfSplit(self, request, context):
    """Split specified PDF into multiple ones
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PdfCleanup(self, request, context):
    """Split specified PDF into multiple ones
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def detectElement(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def predictText(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def batchPredictText(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AlgorithmServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Ping': grpc.unary_unary_rpc_method_handler(
          servicer.Ping,
          request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          response_serializer=algorithm__rpc__pb2.PingReply.SerializeToString,
      ),
      'GetVersion': grpc.unary_unary_rpc_method_handler(
          servicer.GetVersion,
          request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          response_serializer=algorithm__rpc__pb2.VersionReply.SerializeToString,
      ),
      'ImageClassify': grpc.unary_unary_rpc_method_handler(
          servicer.ImageClassify,
          request_deserializer=algorithm__rpc__pb2.ImageRequest.FromString,
          response_serializer=algorithm__rpc__pb2.RpcReply.SerializeToString,
      ),
      'ImagePasreTable': grpc.unary_unary_rpc_method_handler(
          servicer.ImagePasreTable,
          request_deserializer=algorithm__rpc__pb2.ImageRequest.FromString,
          response_serializer=algorithm__rpc__pb2.RpcReply.SerializeToString,
      ),
      'ImageParseChart': grpc.unary_unary_rpc_method_handler(
          servicer.ImageParseChart,
          request_deserializer=algorithm__rpc__pb2.ImageRequest.FromString,
          response_serializer=algorithm__rpc__pb2.RpcReply.SerializeToString,
      ),
      'ImageClassifyParse': grpc.unary_unary_rpc_method_handler(
          servicer.ImageClassifyParse,
          request_deserializer=algorithm__rpc__pb2.ImageRequest.FromString,
          response_serializer=algorithm__rpc__pb2.RpcReply.SerializeToString,
      ),
      'PdfParseSteaming': grpc.unary_stream_rpc_method_handler(
          servicer.PdfParseSteaming,
          request_deserializer=algorithm__rpc__pb2.PdfRequest.FromString,
          response_serializer=algorithm__rpc__pb2.RpcReply.SerializeToString,
      ),
      'PdfParse': grpc.unary_unary_rpc_method_handler(
          servicer.PdfParse,
          request_deserializer=algorithm__rpc__pb2.PdfRequest.FromString,
          response_serializer=algorithm__rpc__pb2.RpcReply.SerializeToString,
      ),
      'PdfSplit': grpc.unary_stream_rpc_method_handler(
          servicer.PdfSplit,
          request_deserializer=algorithm__rpc__pb2.PdfSplitRequest.FromString,
          response_serializer=algorithm__rpc__pb2.RpcReply.SerializeToString,
      ),
      'PdfCleanup': grpc.unary_stream_rpc_method_handler(
          servicer.PdfCleanup,
          request_deserializer=algorithm__rpc__pb2.PdfCleanupRequest.FromString,
          response_serializer=algorithm__rpc__pb2.RpcReply.SerializeToString,
      ),
      'detectElement': grpc.unary_unary_rpc_method_handler(
          servicer.detectElement,
          request_deserializer=algorithm__rpc__pb2.OcrRequest.FromString,
          response_serializer=algorithm__rpc__pb2.ElementReply.SerializeToString,
      ),
      'predictText': grpc.unary_unary_rpc_method_handler(
          servicer.predictText,
          request_deserializer=algorithm__rpc__pb2.OcrRequest.FromString,
          response_serializer=algorithm__rpc__pb2.TextReply.SerializeToString,
      ),
      'batchPredictText': grpc.unary_unary_rpc_method_handler(
          servicer.batchPredictText,
          request_deserializer=algorithm__rpc__pb2.BatchOcrRequest.FromString,
          response_serializer=algorithm__rpc__pb2.TextReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'AlgorithmService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
